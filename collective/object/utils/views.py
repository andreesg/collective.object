#!/usr/bin/python
# -*- coding: utf-8 -*-

#from collective.leadmedia.adapters import ICanContainMedia
from zope.component import getMultiAdapter, getUtility
from plone.dexterity.interfaces import IDexterityFTI
from Products.CMFCore.utils import getToolByName

from plone.dexterity.browser.view import DefaultView
from AccessControl import getSecurityManager
from Products.CMFCore.permissions import ModifyPortalContent
from zope.schema.interfaces import IChoice, ITextLine, IList, IText, IBool
from collective.z3cform.datagridfield.interfaces import IDataGridField
from plone.app.textfield.interfaces import IRichText
from collective.object.utils.interfaces import IListField
from z3c.relationfield.interfaces import IRelationList
from zope.schema import getFields, getFieldsInOrder
from collective.object.utils.variables import GENERAL_WIDGETS
from plone.app.z3cform.widget import AjaxSelectFieldWidget, AjaxSelectWidget, SelectWidget, DatetimeFieldWidget, IAjaxSelectWidget, RelatedItemsFieldWidget
from zope.interface import alsoProvides
from .interfaces import IFormWidget
from plone.dexterity.browser import add, edit
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from plone.app.uuid.utils import uuidToCatalogBrain, uuidToObject
from Products.Five import BrowserView
import json
from collective.object import MessageFactory as _
from z3c.relationfield.interfaces import IRelationList, IRelationValue
from plone.app.contenttypes.behaviors.collection import ICollection
from collective.leadmedia.interfaces import ICanContainMedia
from lxml import etree

#from collective.slickcarousel.viewlets import SlickCarouselUtils

NOT_ALLOWED = [None, '', ' ', 'None']

# # # # # # # # # # # # #
# View specific methods #
# # # # # # # # # # # # #


def fixNutezien():
    import plone.api
    import transaction 

    with plone.api.env.adopt_user(username="admin"):
        nutezienbrains = plone.api.content.find(portal_type="Object", object_on_display=True)
        nutezienobjs = []
        
        for brain in nutezienbrains:
            try:
                obj = brain.getObject()
                if obj.location_currentLocation[0]['end_date'] == '2018-01-22':
                    nutezienobjs.append(obj)
            except:
                pass

        total = len(nutezienobjs)
        curr = 0

        print "Total to be reindexed: %s" %(total)
        for nutezienobj in nutezienobjs:
            curr += 1
            print "Fixing %s / %s" %(curr, total)
            nutezienobj.reindexObject()
            nutezienobj.reindexObject(idxs=['object_on_display'])

        transaction.get().commit()

    return True

def getObjectsData():
    import plone.api

    path_xml = "/var/www/zm-copy/xml/Objects-all-v03.xml"
    path_xml_third_party = "/var/www/zm-copy/xml/all-thirdpartyobjects-v02.xml"

    with plone.api.env.adopt_user(username="admin"):

        """ Create list of prirefs in the XML """
        xml_prirefs = []

        xmlFilePath = path_xml
        xmlDoc = etree.parse(xmlFilePath)
        root = xmlDoc.getroot()
        recordList = root.find("recordList")
        records_collection = recordList.getchildren()

        xmlFilePath = path_xml_third_party
        xmlDoc = etree.parse(xmlFilePath)
        root = xmlDoc.getroot()
        recordList = root.find("recordList")
        records_third_party = recordList.getchildren()

        """ Records collection + third party collection """
        records = records_collection + records_third_party

        for record in records:
            if record.find('priref') != None:
                priref = record.find('priref').text
                xml_prirefs.append(priref)

        """ Create list with prirefs in the website """
        website_prirefs = []
        objects = plone.api.content.find(portal_type="Object", Language="nl")

        not_in_xml = []
        total = len(list(objects))
        curr = 0
        for brain in objects:
            curr += 1 
            obj = brain.getObject()
            obj_priref = getattr(obj, 'priref', None)

            print "Checking object - %s - %s / %s" %(obj_priref, str(curr), str(total)) 
            website_prirefs.append(obj_priref)
            if obj_priref not in xml_prirefs:
                if obj_priref not in not_in_xml:
                    not_in_xml.append(obj_priref)
                    print "Delete record: '%s'" %(obj_priref)
                    plone.api.content.delete(obj=obj)

        """ Check how many of the website prirefs are not in the XML """
        print "XML prirefs: %s" %(len(xml_prirefs))
        print "Website prirefs: %s" %(len(website_prirefs))
        print "Not in XML: %s" %(len(not_in_xml))
        print not_in_xml
        return True

    return True


def fixLocations(location, end_date="2017-02-12"):

    import plone.api
    import transaction

    subfield = "end_date"
    field = "location_currentLocation"

    with plone.api.env.adopt_user(username="admin"):
        objects = plone.api.content.find(location_currentlocation=location)
        if objects:
            total = len(objects)
            curr = 0
            print "Fixing %s objects for the location '%s'" %(total, location)

            for brain in objects:
                curr += 1
                print "Fixing %s / %s" %(curr, total)

                obj = brain.getObject()

                # get field
                location_field = getattr(obj, field, None)
                if location_field:
                    # get first row + update date
                    location_field[0][subfield] = end_date
                    setattr(obj, field, location_field)
                    # reindex object
                    obj.reindexObject()
                    # commit 
                    transaction.get().commit()

    return True

def cleanLocations(location):
    import plone.api
    import transaction

    subfield = "end_date"
    field = "location_currentLocation"

    # * Geschiedenis/Middeleeuwen
    # prirefs = ['5061', '6310', '1784', '10001067', '10001458', '15791', '15990', '899', '1009', '3738', '1588', '1663', '5836', '5837', '16012', '16023', '16024', '16025', '16032', '16076', '7730', '7341', '7383', '8322', '8506', '11769', '11778', '2183', '881', '3259', '19084', '19086', '22284', '22285', '22286', '22288', '22289', '22290', '22291', '22292', '22293', '22294', '22295', '22296', '22297', '22298', '22299', '22300', '22301', '22302', '22303', '22304', '22305', '22306', '22307', '22308', '22309', '22310', '22311', '22312', '22313', '22314', '22315', '22317', '22318', '22386', '22387', '22388', '22389', '22390', '22391', '22404', '22418', '22419', '22420', '22421', '22422', '22423', '22424', '22425', '22426', '22427', '22428', '22429', '22430', '22431', '22432', '7662', '5623', '4024', '4097', '7986', '7992', '7999', '8007', '8010', '8089', '8091', '8098', '8142', '8143', '8145', '8154', '8155', '8156', '8160', '8163', '8165', '8173', '8176', '8178', '8180', '8214', '10819', '7212', '7220', '7257', '7617', '6452', '6457', '6575', '6609', '11501', '11504', '11558', '11579', '4792', '4806', '10000034', '10000059', '10000060', '10000069', '10000094', '10000100', '10000102', '10000344', '10000398', '10000494', '10000495']
    # * Geschiedenis/Schilderijen
    # prirefs = ['6925', '4859', '4932', '5036', '4350', '1546', '12001', '2410', '10000860', '10001062', '10001064', '10001068', '10001307', '6688', '6689', '2928', '21600', '21610', '1567', '1657', '1691', '13460', '16659', '15572', '2723', '12025', '12032', '12035', '12040', '12295', '12296', '600', '3328', '11172', '11199', '18862', '19085', '22323', '8562', '6577', '11448', '12362', '10000145']
    # * Geschiedenis/Vroegtijd
    # prirefs = ['4905', '16732', '16922', '6162', '10001571', '10001596', '15997', '15998', '15999', '16001', '5221', '1586', '1731', '1734', '5834', '5835', '16065', '16066', '16068', '16070', '16071', '16073', '16074', '16075', '16078', '16085', '16087', '16089', '16092', '16093', '16094', '16097', '16098', '16100', '16115', '16120', '16121', '16126', '16130', '16131', '16132', '16136', '16137', '16138', '16140', '16141', '16142', '16143', '16149', '16151', '16152', '16153', '16163', '16167', '16168', '16170', '16171', '16172', '16173', '16174', '16179', '16180', '16185', '16188', '16189', '16195', '11734', '11758', '11759', '11761', '11781', '11798', '2085', '2131', '2695', '783', '19088', '22052', '22053', '22054', '22071', '22411', '22433', '20598', '20599', '20600', '20601', '20602', '20603', '20604', '20605', '20606', '20607', '5532', '5552', '5572', '3944', '7995', '8019', '8020', '8024', '8025', '8026', '8027', '8028', '8029', '8165', '8173', '7240', '33709', '33710', '33711', '33713', '33714', '33715', '33716', '33717', '68', '220', '222', '6392', '17142']
    # * Geschiedenis/Zilver
    # prirefs = ['14151', '14152', '14153', '14175', '14182', '14247', '14315', '14328', '14352', '14420', '14422', '4981', '16752', '10426', '10454', '10503', '10514', '10530', '10531', '10532', '10533', '10535', '10543', '10544', '10545', '10550', '10556', '1338', '13876', '13954', '11965', '11971', '11973', '11987', '11989', '11990', '11991', '11992', '11997', '12002', '12003', '12004', '12005', '12006', '12007', '12008', '12010', '12011', '12012', '12013', '12014', '12015', '12017', '12018', '2259', '2312', '10001460', '10001461', '10001462', '10001567', '15970', '6740', '6745', '2852', '2938', '3102', '1004', '21600', '21990', '21992', '22002', '22003', '22004', '22005', '22007', '22008', '22016', '22017', '22019', '22020', '7710', '8340', '11812', '11818', '16693', '16694', '15730', '15731', '15732', '14645', '14711', '14714', '2501', '2539', '12019', '12224', '3431', '3455', '20861', '5403', '5613', '8138', '8733', '15179', '15180', '15184', '15185', '15198', '10822', '10827', '15117', '15125', '7224', '7573', '7599', '7610', '6608', '14755', '14768', '14769', '14772', '14774', '14775', '14802', '13695', '313', '17161', '10823']

    with plone.api.env.adopt_user(username="admin"):
        objects = plone.api.content.find(location_currentlocation=location)

        if objects:
            total = len(objects)
            curr = 0
            print "Cleaning %s objects for the location '%s'" %(total, location)

            prirefs = []

            for brain in objects:
                
                curr += 1
                print "Cleaning %s / %s" %(curr, total)

                obj = brain.getObject()

                priref = getattr(obj, 'priref', None)
                if priref not in prirefs:
                    prirefs.append(priref)
                
                # get field
                location_field = getattr(obj, field, None)
                if location_field:
                    for loc in location_field:
                        if location in loc['location']:
                            loc['location'].remove(location)

                            obj.reindexObject()
                            transaction.get().commit()

                setattr(obj, field, location_field)

            print prirefs

    return True



def unpublishObjects():
    import plone.api
    import transaction
    list_to_unpublish = ["0002-1","0002-2","0002-3","0002-4","0010-1","0010-7","0011-205","0011-206","0011-306","0011-372 / 0011-395","0011-373","0011-374","0011-375","0011-376","0011-383","0011-384","0011-390","0011-391","0011-399","0012-401","0014-1","0014-2","0014-3","0014-33","0014-37","0014-4","0014-5","0014-51","0014-8","0015-89","0015-94","0015-95","0015-96","0019-16","0019-19","0019-22","0019-27","0019-29","0019-30","0020-6","002-232","002-51","002-81","0031-4","1334-13","1400-8","1410-1","1468-1","1493-1","1499-9","1535-13","1536-103","1536-93","1583-5","198-85","20-Jan","203-1","2043-2","253-5","253-9","306-1","337-01/-03","3600-BEV-Z-65","3600-Z-3165-01","3600-Z-3165-02","3600-Z-3165-03","3600-Z-3165-04","3600-Z-3165-05","3600-Z-3165-06","3600-Z-3165-07","3600-Z-3166-01","3600-Z-3166-02","3600-Z-3166-03","3600-Z-3166-04","3600-Z-3166-05","3600-Z-3166-06","3600-Z-3166-07","3600-Z-3166-08","3600-Z-3166-09","3600-Z-3166-10","3600-Z-3166-11","3600-Z-3166-12","3600-Z-3166-13","39-1","71-1","716-1","716-27","717-46","724-1","724-28","725-12","725-24","725-25","725-35","725-36","725-5","727-1","733-10","776-2","804-2","804-5","804-7","811-4","812-3","812-4","908-14","AB0940-01/02","AB0945-01/02","AB0953-01/05","AB0955-01/03","AB1065-01/04","AB1076-01/03","AB1104-01/02","AB1110-01/05","AB1143-01/06","AB1354-01/02","AB1402-01/02","AB1420-01/02","AB1421-01/02","AB1422","AB1423-01/02","AB1431-01/02","AB1468-01/05","AB1469-01/05","AB1470-01/05","AB1472-01/05","AB1476-01/05","AB1477-01/05","AB1478-01/05","AB1479-01/05","AB1480-01/05","AB1482-01/05","AB1483-01/05","AB1484-01/03","AB1488-01/05","AB1517-01/05","AB1582-01/05","AB1620-01/05","AB1681-01/02","AB1698-01/02","AB1700-01/02","AB1722-01/02","AB1726-01/02","AB1753-01/04","AB1754-01/02","AB1758-01/02","AB1766-01/06","AB1767-01/09","AB1770-01/02","AB1771-01/03","B191-06-02","B191-16-02","B191-60","B191-66","B191-72","Br00-001-01","Br00-001-02","Br00-002-01","Br00-002-02","Br00-003-01","Br00-003-02","Br00-003-03","Br00-003-04","Br00-004","Br00-005","Br00-006-01","Br00-006-02","Br00-006-03","Br00-007-01","Br00-007-02","Br00-008","Br00-009","Br01-001-01","Br01-001-02","Br01-001-03","Br01-008","Br03-002","Br03-004","Br03-005","Br03-012","Br03-013","Br03-014","Br04-002","Br05-001","Br06-0341a","Br07-009","Br07-010","Br07-014","Br08-014","Br09-001","Br11-001","Br12-001","Br12-002","Br13-003","Br13-004","Br15-002","Br16-001","Br63-041","Br63-041-01","Br63-041-02","Br63-041-03","Br63-041-04","Br63-041-05","BR64-038","Br65-004","Br72-003","Br72-005","Br73-001","Br77-004","Br78-006","Br79-001","Br80-001","Br80-002","Br80-003","Br80-004","Br80-005","Br86-004","Br86-005","Br86-006","Br86-009","Br86-023","Br86-024","Br86-025","Br86-026","Br86-027-01","Br86-027-02","Br86-027-03","Br86-027-04","Br86-029","Br86-032","Br86-034","Br86-035","Br86-036","Br86-037-01","Br86-037-02","Br86-040","Br86-041","Br86-042","Br86-046","Br86-050","Br87-001","Br89-001","BR91-031","BR92-001","Br93-003","BR94-007","BR94-012","BR94-013","BR94-014","BR94-015","BR95-001","BR95-002","BR95-050","Br95-051","BR95-053","BR96-005-01","BR96-005-02","BR96-010","Br96-011","BR96-012","BR96-013","BR96-014","BR96-015","BR96-016","BR96-017","BR96-018","BR96-019","BR96-020","BR96-021","BR96-022","BR96-023","BR96-024","BR96-025","BR96-026","BR96-027","BR96-028","Br97-001","Br97-002","Br98-002","Br98-003","Br98-004","Br98-005","Br98-006","Br98-007","Br98-008","Br98-009","Br98-010","Br98-011","Br98-012","Br98-013","Br98-014","Br98-015-001/002","Br98-016","Br98-017","Br98-018","Br98-019","Br98-020","Br98-021","Br98-022","Br98-023","Br98-027","Br98-028","Br98-029","Br98-030","Br98-032","Br98-033","Br98-034","Br98-035","Br98-036","Br98-038","Br98-039","Br98-040","Br98-041","Br98-043","Br98-044","Br98-045","Br98-046","Br98-047","Br98-048","Br98-049","Br98-050","Br98-051","Br98-052","Br98-053","Br98-054","Br98-055","Br98-056","Br98-057","Br98-058","Br98-059","Br98-061","Br98-062","Br98-063","Br98-063-01","Br98-063-02","Br98-063-03","Br98-063-04","Br98-063-05","Br98-063-06","Br98-063-07","Br98-063-08","Br98-063-09","Br98-063-10","Br98-063-11","Br98-063-12","Br98-063-13","Br98-063-14","Br98-063-15","Br98-063-16","Br98-063-17","Br98-063-18","Br98-063-19","Br98-063-20","Br98-064","Br-HW009","Br-HW011","Br-HW012","Br-HW041","Br-HW042","Br-HW046","Br-HW048","Br-HW049","Br-HW050","Br-HW055","Br-HW056","Br-HW067","Br-HW068","Br-HW081","Br-HW082","Br-HW083","Br-HW085","Br-HW086","Br-HW087","Br-HW099","Br-HW100","Br-HW102","Br-HW117","Br-i1970/12.3","Br-i1970/12.37","Br-RMCCs177","Br-S-01","Br-SK-A-866","Br-SK-A-867","DUBBELG0446-[00001]","DUBBELG0451-[00001]","DUBBELG0452-[00001]","DUBBELG0453-[00001]","DUBBELG2224-[00001]","DUBBELG2325-[00001]","DUBBELG2414-[00001]","DUBBELG3400-[00001]","DUBBELGm0071-[00001]","DUBBELGm0231-[00001]","DUBBELGm0432-[00002]","DUBBELGm0644-[00001]","DUBBELGm0704-[00001]","DUBBELGm0925-[00001]","DUBBELGm1016-[00002]","DUBBELGm1272-[00001]","DUBBELGV-1993 14-[00001]","DUBBELGV-1993 39-[00001]","DUBBELGV-1993 8-[00001]","DUBBELGV-1994 3-[00001]","DUBBELGV-3-[00001]","DUBBELM61-024-78-[00001]","DUBBELM61-024-99-[00001]","DUBBELM61-027-[00001]","DUBBELM61-028-[00001]","DUBBELM64-171-[00005]","DUBBELM64-171-[00006]","DUBBELM64-171-[00007]","DUBBELM64-171-[00008]","DUBBELM64-171-[00009]","DUBBELM64-171-[00012]","DUBBELM64-171-[00013]","DUBBELM74-012-[00001]","DUBBELM75-068-[00001]","DUBBELM75-068-[00002]","DUBBELM75-068-[00003]","DUBBELM75-068-[00004]","DUBBELM75-068-[00005]","DUBBELM75-068-[00006]","DUBBELM75-068-[00007]","DUBBELM75-068-[00008]","DUBBELM75-068-[00009]","DUBBELM75-068-[00010]","DUBBELM75-068-[00011]","DUBBELM75-068-[00012]","DUBBELM75-068-[00013]","DUBBELM86-033-[00001]","DUBBELPKCZ00414-[00001]","E2007-01","E2013-01","E2013-02","E2016-01","Foutief M01-018","Foutief M01-019","Foutief M01-025","Foutief M75-004","FoutiefM00-009","foutiefM01-020","FoutiefM01-021","foutiefM01-022","FoutiefM01-023","FoutiefM90-015","G1184","G1184-03-01","G1184-03-02","G1222-01","G1222-02","G1222-03","G1446-01/12","G1875-01","G1875-02","G1875-03","G2136","G2285","G2478","G2480","G2514","G2702","G2707","G2708","G2852","G2853","G2891-01/02","G2900-01/02","G99-088","Gm1741","GV-1994-21","LG1525","LG1578","LG1592A","LG1600","LG1605","LG1618","LG1621","LG1638","LG1639","LG1644","LG1648","LG1692","LG1696","LG1714","LG1715","LG1726","LG1727","LG1728","LG1729","LG1730","LG1731","LG1732","LG1733","LG1734","LG1735","LG1736","LG1737","LG1738","LG1739","LG1740","LG1741","LG1742","LG1744","LG1745","LG1747","LG1748","LG1749","LG1750","LG1751","LG1752","LG1753","LG1754","LG1755","LG1756","LG1757","LG1758","LG1759","LG1760","LG1762","LG1763","LG1769","LG1770","LG1771","LG1772","LG1773","LG1774","LG1775","LG1776","LG1777","LG1778A/B","LG1779A/B","LG1786","LG1787","LG1788","LG1789","LG1790","LG1810","LG1812","LG1819","LG1820","LG1821","LG1822","LG1823","LG1825-02","LG1825A","LG1827","LG1829","LG1830","LG2212","LG2647","LG2648","LG2649","LG2653","LG2868-01/02","LG2869","LG2919","LG2920","LM11-002","LM11-003","LM62-003","LM62-086","LM62-125","LM62-131","LM62-148","LM63-019","LM63-020","LM63-026","LM63-101","LM63-144","LM63-148","LM63-160","LM64-162","LM64-163","LM64-164-01","LM64-164-02","LM64-164-03","LM64-164-04","LM64-167","LM65-090","LM67-048","LM67-058","LM67-072","LM67-090","LM67-127","LM67-157","LM67-168","LM67-229","LM69-047","LM69-058","LM70-017","LM70-051","LM70-055","LM70-061","LM70-062","LM70-069","LM70-071","LM72-011","LM73-041","LM73-071","LM74-006","LM76-008","LM77-018","LM77-021","LM77-023","LM77-026","LM77-035","LM77-044","LM77-049","LM78-012","LM79-036","LM79-037","LM79-038","LM79-039","LM79-040","LM79-041","LM79-042","LM79-043","LM79-044","LM79-045","LM79-046","LM79-059-01","LM79-059-02","LM80-012","LM80-042","LM80-059","LM81-037","LM81-038","LM83-027","LM83-028","LM85-013","LM87-037","LM87-054","LM87-055","LM87-056","LM87-102","LM87-104","LM92-014","LM92-015","LM93-027","LM98-072-01/03","M01-167-01/06","M03-020","M03-034","M04-055-09","M04-057","M10-008","M10-114-01/09","M10-115-01/02","M10-116-01/02","M10-128","M10-146","M10-148","M10-149","M10-150","M10-151","M10-152","M10-153/162","M11-095","M16-009","M62-128-06","M62-128-07","M62-128-08","M62-128-09","M62-128-10","M62-128-11","M62-128-14","M62-128-28","M62-128-32","M62-128-34","M65-066-01","M65-078","M65-079","M65-080","M65-081","M65-082","M65-083","M65-111","M65-112","M65-115","M65-116","M65-117","M65-118","M66-012","M66-014-02-1/11","M66-014-03-1/23","M66-014-04-1/8","M66-014-05-1/3","M67-261","M67-262","M67-279","M67-280","M67-281","M68-041","M68-043","M68-068","M68-40","M69-034","M69-035","M69-053","M69-060","M70-056-01/02","M71-008","M73-030","M73-042","M73-043","M74-127","M75-014","M75-015","M75-016","M75-018","M75-019","M75-068","M79-004","M79-032-01","M79-032-02","M79-032-03","M79-032-04","M79-032-05","M79-032-06","M79-032-07","M79-032-08","M79-032-09","M79-032-10","M79-032-11","M79-032-12","M79-032-13","M79-032-14","M79-032-15","M79-032-16","M79-032-18","M79-032-19","M79-032-20","M79-032-P","M79-054","M80-026-01/06","M81-026-01/05","M81-027-01/03","M81-031-01/04","M84-080-01/05","M87-030","M87-043","M87-084","M87-105","M89-001","M89-019-01/05","M89-034","M89-037","M90-009","M90-014","M90-024","M90-026","M91-005-01","M91-005-02","M91-005-03","M91-014-1/9","M92-016-01","M92-016-02","M92-016-03","M92-016-04","M92-016-05","M92-016-06","M92-016-07","M92-016-08","M92-016-09-1/2","M92-016-09I","M92-016-10","M92-016-11-01/02","M92-016-12-01/03","M92-016-13","M92-016-14-01/02","M92-016-15","M92-016-16","M92-016-18","M92-016-19","M92-016-20-01/05","M92-016-21","M92-016-22-01/04","M92-016-23","M92-016-24","M92-016-25","M92-016-26","M92-016-27","M92-016-28","M92-016-29-01/02","M92-0163-04-01/02","M92-016-31","M92-016-32","M92-016-33","M92-016-34","M92-016-36","M92-016-37","M92-016-38","M92-016-P","M93-002","M93-003","M93-018","M93-021-01/08","M94-006","M95-015","P10-001","PKCZ00-01","PKCZ00013-01/07","PKCZ00-02","PKCZ00022","PKCZ00022-01","PKCZ00022-02","PKCZ00022-03","PKCZ00-03","PKCZ00064","PKCZ00-07","PKCZ00071","PKCZ00073","PKCZ00075","PKCZ00075-01","PKCZ00075-02","PKCZ00075-03","PKCZ00075-04","PKCZ00075-05","PKCZ00075-06","PKCZ00075-07","PKCZ00075-08","PKCZ00075-09","PKCZ00075-10","PKCZ00-08","PKCZ00083","PKCZ00083-01","PKCZ00083-02","PKCZ00083-03","PKCZ00083-04","PKCZ00084","PKCZ00084-01","PKCZ00084-02","PKCZ00089","PKCZ00-09-01","PKCZ00-09-02","PKCZ00092-01","PKCZ00092-02","PKCZ00092-03","PKCZ00092-04","PKCZ00096","PKCZ00-10-02","PKCZ00-11-01","PKCZ00-11-02","PKCZ00-11-03","PKCZ00121-01","PKCZ00121-02","PKCZ00121-03","PKCZ00130-01","PKCZ00130-02","PKCZ00-14-01","PKCZ00-14-02","PKCZ00-15-01","PKCZ00-15-02","PKCZ00-15-03","PKCZ00154","PKCZ00159","PKCZ00167","PKCZ00173","PKCZ00193","PKCZ00199","PKCZ00236-01","PKCZ00236-02","PKCZ00259-01","PKCZ00259-02","PKCZ00267","PKCZ00272-01","PKCZ00272-02","PKCZ00272-03","PKCZ00272-04","PKCZ00272-05","PKCZ00272-06","PKCZ00272-07","PKCZ00272-08","PKCZ00272-09","PKCZ00272-B","PKCZ00272-C","PKCZ00272-D","PKCZ00272-E","PKCZ00272-F","PKCZ00272-J","PKCZ00272-K","PKCZ00272-L","PKCZ00272-M","PKCZ00272-N","PKCZ00272-O","PKCZ00274-01","PKCZ00274-02","PKCZ00274-03","PKCZ00274-04","PKCZ00283","PKCZ00305-01","PKCZ00305-02","PKCZ00305-03","PKCZ00305-04","PKCZ00305-05","PKCZ00305-06","PKCZ00305-07","PKCZ00307-01","PKCZ00307-02","PKCZ00320","PKCZ00320-01","PKCZ00320-02","PKCZ00320-03","PKCZ00320-04","PKCZ00320-05","PKCZ00324","PKCZ00324-01","PKCZ00324-02","PKCZ00324-03","PKCZ00324-04","PKCZ00324-05","PKCZ00324-06","PKCZ00324-07","PKCZ00324-08","PKCZ00324-09","PKCZ00324-10","PKCZ00324-11","PKCZ00324-12","PKCZ00324-13","PKCZ00324-14","PKCZ00324-15","PKCZ00324-16","PKCZ00324-17","PKCZ00324-18","PKCZ00324-19","PKCZ00324-20","PKCZ00324-21","PKCZ00324-22","PKCZ00324-23","PKCZ00324-24","PKCZ00324-25","PKCZ00324-26","PKCZ00376","PKCZ00395","PKCZ00406","PKCZ00406-01","PKCZ00406-02","PKCZ00406-03","PKCZ00409","PKCZ00409-01","PKCZ00409-02","PKCZ00410","PKCZ00410-01","PKCZ00410-02","PKCZ00410-03","PKCZ00410-04","PKCZ00410-05","PKCZ00417","PKCZ00431-01","PKCZ00431-02","PKCZ00431-03","PKCZ00431-04","PKCZ00431-05","PKCZ00431-06","PKCZ00431-07","PKCZ00431-08","PKCZ00431-09","PKCZ00431-10","PKCZ00431-11","PKCZ00431-12","PKCZ00443-01","PKCZ00443-02","PKCZ00443-03","PKCZ00444-01","PKCZ00444-02","PKCZ00444-03","PKCZ00444-04","PKCZ00444-05","PKCZ00444-06","PKCZ00445-01","PKCZ00445-02","PKCZ00445-03","PKCZ00445-04","PKCZ00450","PKCZ00450-01","PKCZ00450-02","PKCZ00475-01","PKCZ00475-02","PKCZ00488-01","PKCZ00488-02","PKCZ00516","PKCZ00516-01","PKCZ00516-02","PKCZ00516-03","PKCZ00516-04","PKCZ00516-05","PKCZ00518-01","PKCZ00518-02","PKCZ00521-01/02","PKCZ00521-03/05","PKCZ00522","PKCZ00522-01","PKCZ00522-02","PKCZ00543-01","PKCZ00543-02","PKCZ00543-03","PKCZ00543-04","PKCZ00544-01","PKCZ00544-02","PKCZ00544-03","PKCZ00545-01","PKCZ00545-02","PKCZ00545-03","PKCZ00545-04","PKCZ00545-05","PKCZ00545-06","PKCZ00552-01","PKCZ00552-02","PKCZ00552-03","PKCZ00552-04","PKCZ01-01-01","PKCZ01-01-02","PKCZ01-01-03","PKCZ01-01-04","PKCZ01-01-05","PKCZ01-01-06","PKCZ01-01-07","PKCZ01-02","PKCZ04-022-01","PKCZ04-022-02","PKCZ04-022-03","PKCZ04-022-04","PKCZ04-022-05","PKCZ04-022-06","PKCZ04-022-07","PKCZ04-023-01","PKCZ04-023-02","PKCZ04-023-03","PKCZ04-024-01","PKCZ04-024-02","PKCZ04-024-03","PKCZ04-024-04","PKCZ92-02","PKCZ92-03-01","PKCZ92-03-02","PKCZ92-03-03","PKCZ92-04","PKCZ92-05-01","PKCZ92-05-02","PKCZ92-05-03","PKCZ92-07-01","PKCZ92-07-02","PKCZ92-07-03","PKCZ92-12-01","PKCZ92-12-02","PKCZ92-12-03","PKCZ93-04-01/02","PKCZ93-04-03/04","PKCZ94-05","PKCZ94-19-01","PKCZ94-19-02","PKCZ94-22","PKCZ94-24-01","PKCZ94-24-02","PKCZ94-24-03","PKCZ94-24-04","PKCZ94-24-05","PKCZ94-24-06","PKCZ94-24-07","PKCZ94-24-08","PKCZ94-25-01","PKCZ94-25-02","PKCZ94-25-03","PKCZ94-25-04","PKCZ94-25-05","PKCZ94-25-06","PKCZ94-25-07","PKCZ94-25-08","PKCZ94-25-09","PKCZ94-25-10","PKCZ94-25-11","PKCZ95-03-01","PKCZ95-03-02","PKCZ96-02-01","PKCZ96-02-02","PKCZ96-02-03","PKCZ96-02-04","PKCZ96-02-05","PKCZ96-08-01","PKCZ96-08-02","PKCZ96-08-03","PKCZ96-19-01","PKCZ96-19-02","PKCZ96-19-03","PKCZ96-20-01","PKCZ96-20-02","PKCZ96-20-03","PKCZ96-20-04","PKCZ96-20-05","PKCZ96-20-06","PKCZ97-01-01","PKCZ97-01-02","PKCZ97-01-03","PKCZ97-01-04","PKCZ97-01-05","PKCZ97-01-06","PKCZ97-01-07","PKCZ97-01-08","PKCZ97-01-09","PKCZ97-01-10","PKCZ97-01-11","PKCZ97-01-12","PKCZ97-02-01","PKCZ97-02-02","PKCZ97-02-03","PKCZ97-02-04","PKCZ97-02-05","PKCZ97-02-06","PKCZ97-02-07","PKCZ97-02-08","PKCZ97-02-09","PKCZ97-02-10","PKCZ97-02-11","PKCZ98-73-01","PKCZ98-73-02","PKCZ98-73-03","PKCZ98-73-04","PKCZ98-78-01","PKCZ98-78-02","PKCZ98-79-01","PKCZ98-79-02","PKCZ98-79-03","PKCZ98-79-04","PKCZ98-80-01","PKCZ98-80-02","PKCZ98-80-03","PKCZ99-10-01","PKCZ99-10-02","PKCZ99-10-03","PKCZ99-10-04","PKCZ99-10-05","PKCZ99-10-06","PKCZ99-10-07","PKCZ99-10-08","PKCZ99-10-09","PKCZ99-10-10","PKCZ99-10-11","SN0001","SN0002","SN0003","SN0004","SN0005","SN0006","SN0007","SN0008","SN0010","SN0018","SN0021","SN0024","SN0043","SN0053","SN0068","SN0069","SN0070","SN0071","SN0072","SN0073","SN0074","SN0076","SN0077","SN0095","SN0100","SN0102","SN0106","SN0120","SN0127","SN0129","SN0148","SN0152","SN0156-01","SN0156-02","SN0156-03","SN0156-04","SN0177-01","SN0177-02","SN0177-03","SN0177-04","SN0177-05","SN0177-06","SN0179","SN0180","SN0184","SN0194","SN0211","SN0215","SN0216","SN0218","SN0219-01","SN0219-02","SN0220","SN0229","SN0242","SN0243","SN0252","SN0253","SN0255","SN0256","SN0259","SN0260","SN0261","SN0262","SN0263","SN0264","SN0266","SN0267","SN0268","SN0269","SN0270","SN0271","SN0272","SN0273","SN0276-01-01","SN0276-01-02","SN0276-01-03","SN0276-02","SN0276-04","SN0276-05","SN0276-06","SN0276-07","SN0276-08","SN0276-11","SN0276-12","SN0276-13","SN0276-14","SN0276-15","SN0276-16","SN0276-17","SN0276-18","SN0276-19","SN0276-20","SN0276-23","SN0276-24","SN0276-25","SN0300","SN0303","SN0310","SN0314","SN0315","SN0316","SN0318","SN0319","SN0322","SN0322-01","SN0323","SN0324","SN0325","SN0326","SN0327","SN0328","SN0329","SN0331","SN0336","SN0337","SN0338","SN0340","SN0341","SN0342","SN0343","SN0344","SN0345","SN0346","SN0346-01","SN0347","SN0348","SN0349-01","SN0349-02","SN0349-03","SN0349-04","SN0350-01/02","SN0351","SN0352-01/02","SN0353","SN347","T0001","ZG165"]
    list_to_unpublish_copyright = ["Br00-009","Br05-003","Br05-004","Br09-001","Br12-002","Br13-004","BR62-011","BR62-012","BR62-013","Br62-014","BR63-001","BR63-002","BR63-003","BR63-004","BR63-005","BR63-006","BR63-007","BR63-008","BR63-009","BR63-010","BR63-011","BR63-012","BR63-013","BR63-014","BR63-015","BR63-016","BR63-017","BR63-018","BR63-019","BR63-020","BR63-021","BR63-022","BR63-023","BR63-025","BR63-026","BR63-027","BR63-028","BR63-029","BR63-030","BR63-031","BR63-032","BR63-033","BR63-034","BR63-035","Br63-036","Br63-037","Br63-038","Br63-039","Br63-040","BR64-001","BR64-002","BR64-002-01","BR64-003","BR64-004","BR64-005","BR64-006","BR64-007","BR64-008","BR64-009","Br64-010","BR64-011","BR64-012","BR64-014","BR64-015","BR64-016","BR64-017","BR64-018","Br64-019","BR64-021","BR64-022","BR64-024","BR64-025","BR64-026","BR64-027","Br64-028","BR64-030","BR64-033","Br64-035","BR91-024","BR94-015","BR96-006","BR96-007","BR96-008","BR96-009","Foutief M01-018","foutiefM01-022","FoutiefM01-023","G02-001","G11-006","G1199","G13-003","G1361","G1523","G1538","G1540","G1541","G1542","G1550","G1551","G1552","G1554","G1561","G1567","G1580","G1583","G1585","G1611","G1631","G1643-01","G1656","G1678","G1692","G2509","G99-068","G99-071","G99-073","G99-077","G99-083","G99-084","G99-085","Gm1167","Gm1168","Gm1682","Gm1693","Gm1767","M00-001","M00-011","M00-121","M00-159","M00-160","M00-161","M00-163","M00-165","M00-166","M00-168","M00-170","M00-191","M00-204","M00-209","M01-009","M01-010","M01-011","M01-012","M01-053","M03-001","M03-023","M03-024","M03-032","M03-034","M04-004","M04-005","M04-006","M04-007","M04-008","M04-009","M04-028","M04-029","M04-030","M05-024","M05-042","M05-043","M05-045","M05-046","M05-050","M05-051","M05-061-02","M05-061-03","M05-061-04","M05-062","M05-063","M05-065","M06-003","M06-004","M06-005","M07-126","M09-1089","M09-154","M09-155","M09-156","M10-153","M10-154-01/02","M10-155","M10-156","M10-157-01/02","M10-158","M10-159","M10-160","M10-161","M10-162","M10-164","M10-165-01","M10-165-02","M10-165-03","M10-165-04","M10-165-05","M10-165-06","M10-165-07","M10-165-08","M10-165-09","M10-165-10","M10-165-11","M10-165-12","M11-006","M11-008","M11-009","M11-010","M11-011","M11-012","M11-014","M11-015","M11-016","M11-017","M11-018","M11-019","M11-020","M11-021","M11-022","M11-023","M11-024","M11-025","M11-026","M11-027","M11-028","M11-029","M11-030","M11-031","M11-032","M11-033","M11-034","M11-035","M11-036","M11-037","M11-041","M11-042","M11-043","M11-044","M11-046","M11-047","M11-048","M11-053","M11-054","M11-055","M11-057","M11-058","M11-062","M11-063","M11-064","M11-065","M11-069","M11-072","M11-073","M11-075","M11-076","M11-077","M11-078","M11-079","M11-080","M11-081","M11-082","M11-083","M11-084","M11-086","M11-087","M12-002","M12-035","M13-004","M13-005","M13-014","M14-001","M14-016","M14-017","M14-039","M14-040","M15-009","M15-014","M15-021","M15-022","M15-071","M16-008","M16-013","M16-014","M61-006","M61-007","M61-008","M61-009","M61-010","M61-011","M61-012","M61-014","M61-015","M61-016","M61-017","M61-018","M61-019","M61-020","M61-021","M61-024-01","M61-024-02","M61-024-03","M61-024-04","M61-024-05","M61-024-06","M61-024-07","M61-024-08","M61-024-09","M61-024-10","M61-024-100","M61-024-11","M61-024-12","M61-024-13","M61-024-14","M61-024-15","M61-024-16","M61-024-17","M61-024-18","M61-024-19","M61-024-20","M61-024-22","M61-024-23","M61-024-24","M61-024-25","M61-024-26","M61-024-27","M61-024-28","M61-024-29","M61-024-30","M61-024-31","M61-024-32","M61-024-33","M61-024-34","M61-024-35","M61-024-36","M61-024-37","M61-024-38","M61-024-39","M61-024-40","M61-024-41","M61-024-42","M61-024-43","M61-024-44","M61-024-45","M61-024-46","M61-024-47","M61-024-48","M61-024-49","M61-024-50","M61-024-51","M61-024-52","M61-024-53","M61-024-54","M61-024-55","M61-024-56","M61-024-57","M61-024-58","M61-024-59","M61-024-60","M61-024-61","M61-024-62","M61-024-64","M61-024-65","M61-024-66","M61-024-67","M61-024-68","M61-024-69","M61-024-70","M61-024-71","M61-024-72","M61-024-73","M61-024-74","M61-024-75","M61-024-76","M61-024-77","M61-024-78","M61-024-79","M61-024-80","M61-024-81","M61-024-82","M61-024-83","M61-024-84","M61-024-85","M61-024-86","M61-024-87","M61-024-88","M61-024-89","M61-024-90","M61-024-92","M61-024-93","M61-024-94","M61-024-95","M61-024-96","M61-024-97","M61-024-98","M61-024-99","M61-029","M62-086","M62-093","M62-094","M62-095","M62-124","M62-142-06","M62-145","M62-146","M62-147","M62-148","M62-149","M62-150","M63-019","M63-020","M63-026","M63-027","M63-101","M63-107","M63-144","M63-149","M64-130","M64-130","M64-149","M64-165-02","M64-165-105","M64-165-109","M64-165-20","M64-165-24","M64-165-26","M64-165-28","M64-165-32","M64-165-82","M64-165-83","M64-165-84","M64-165-85","M64-165-86","M64-165-87","M64-165-91","M64-165-93","M65-040","M65-041","M65-049","M65-068","M65-075","M65-089","M65-090","M65-095","M65-102","M65-105","M66-014-02-1","M66-014-02-1/11","M66-014-02-10","M66-014-02-11","M66-014-02-2","M66-014-02-3","M66-014-02-4","M66-014-02-5","M66-014-02-6","M66-014-02-7","M66-014-02-8","M66-014-02-9","M66-014-03-1","M66-014-03-1/23","M66-014-03-2/23","M66-014-04-1","M66-014-04-1/8","M66-014-04-2","M66-014-04-3","M66-014-04-4","M66-014-04-5","M66-014-04-6","M66-014-04-7","M66-014-04-8","M66-014-05-1","M66-014-05-1/3","M66-014-05-2","M66-014-05-3","M66-014-06-01/02","M66-014-07-1","M66-014-07-2","M66-014-07-3","M66-014-07-4","M66-014-08-1/12","M66-014-09-001","M66-014-09-002","M66-014-09-003","M66-014-09-004","M66-014-09-005","M66-014-09-006","M66-014-09-007","M66-014-09-008","M66-014-09-009","M66-014-09-010","M66-014-09-011","M66-014-09-012","M66-014-09-013","M66-014-09-014","M66-014-09-015","M66-014-09-016","M66-014-09-017","M66-014-09-018","M66-014-09-019","M66-014-09-020","M66-014-09-021","M66-014-09-022","M66-014-09-023","M66-014-09-024","M66-014-09-025","M66-014-09-026","M66-014-09-027","M66-014-09-028","M66-014-09-029","M66-014-09-030","M66-014-09-031","M66-014-09-032","M66-014-09-033","M66-014-09-034","M66-014-09-035","M66-014-09-036","M66-014-09-037","M66-014-09-038","M66-014-09-039","M66-014-09-040","M66-014-09-041","M66-014-09-042","M66-014-09-043","M66-014-09-044","M66-014-09-045","M66-014-09-046","M66-014-09-047","M66-014-09-048","M66-014-09-049","M66-014-09-050","M66-014-09-051","M66-014-09-052","M66-014-09-053","M66-014-09-054","M66-014-09-055","M66-014-09-056","M66-014-09-057","M66-014-09-058","M66-014-09-059","M66-014-09-060","M66-014-09-061","M66-014-09-062","M66-014-09-063","M66-014-09-064","M66-014-09-065","M66-014-09-066","M66-014-09-067","M66-014-09-068","M66-014-09-069","M66-014-09-070","M66-014-09-071","M66-014-09-072","M66-014-09-073","M66-014-09-074","M66-014-09-079","M66-014-09-080","M66-014-09-081","M66-014-09-082","M66-014-09-083","M66-014-09-084","M66-014-09-085","M66-014-09-086","M66-014-09-087","M66-014-09-088","M66-014-09-089","M66-014-09-090","M66-014-09-091","M66-014-09-092","M66-014-09-093","M66-014-09-094","M66-014-09-095","M66-014-09-096","M66-014-09-097","M66-014-09-098","M66-014-09-099","M66-014-09-100","M66-014-09-101","M66-014-09-102","M66-014-09-103","M66-014-09-104","M66-014-09-105","M66-014-09-106","M66-014-09-107","M66-014-09-108","M66-014-09-111","M66-014-09-112","M66-014-09-113","M66-014-09-114","M66-014-09-115","M66-014-09-116","M66-014-09-117","M66-014-09-118","M66-014-09-119","M66-014-09-120","M66-014-09-121","M66-014-09-122","M66-014-09-123","M66-014-09-124","M66-014-09-125","M66-014-09-126","M66-014-09-127","M66-014-10-02","M66-014-10-03","M66-014-11-01","M66-014-11-02","M66-014-11-03","M66-014-11-04","M66-014-12-01","M66-014-12-02","M66-014-12-03","M66-014-12-04","M66-014-12-05","M66-014-12-06","M66-014-12-07","M66-014-12-08","M66-014-12-09","M66-014-12-10","M66-014-12-11","M66-014-12-12","M66-014-14-1/75","M66-014-14-10","M66-014-14-11","M66-014-14-12","M66-014-14-13","M66-014-14-14","M66-014-14-15","M66-014-14-16","M66-014-14-17","M66-014-14-18","M66-014-14-19","M66-014-14-20","M66-014-14-21","M66-014-14-22","M66-014-14-23","M66-014-14-24","M66-014-14-25","M66-014-14-26","M66-014-14-27","M66-014-14-28","M66-014-14-29","M66-014-14-30","M66-014-14-31","M66-014-14-32","M66-014-14-33","M66-014-14-34","M66-014-14-35","M66-014-14-37","M66-014-14-38","M66-014-14-39","M66-014-14-40","M66-014-14-41","M66-014-14-42","M66-014-14-44","M66-014-14-45","M66-014-14-46","M66-014-14-47","M66-014-14-48","M66-014-14-49","M66-014-14-50","M66-014-14-51","M66-014-14-52","M66-014-14-53","M66-014-14-54","M66-014-14-55","M66-014-14-56","M66-014-14-57","M66-014-14-58/75","M66-014-15","M66-014-16","M66-043","M66-051","M67-039","M67-040","M67-041","M67-046","M67-047","M67-047-01","M67-048","M67-049","M67-053","M67-057","M67-063","M67-066","M67-067","M67-069","M67-071","M67-075","M67-076","M67-077","M67-078","M67-105","M67-125","M67-131","M67-134","M67-136","M67-143","M67-144","M67-147","M67-148","M67-149","M67-150","M67-151","M67-153","M67-154","M67-155","M67-156","M67-157","M67-158","M67-159","M67-160","M67-161","M67-163","M67-165","M67-167","M67-168","M67-171","M67-172","M67-173","M67-174","M67-175","M67-191","M67-229","M67-277","M68-001","M68-014","M68-015","M68-016","M68-017","M68-018","M68-019","M68-020","M68-021","M68-022","M68-023","M68-024","M68-025","M68-026","M68-027","M68-028","M68-029","M68-071","M69-048","M69-062","M69-063","M69-064","M69-065","M70-017","M70-051","M70-057","M70-058","M70-059","M70-060","M70-061","M70-062","M70-064","M70-065","M70-066","M70-067","M70-068","M70-069","M70-070","M70-071","M70-072","M70-074","M70-076","M70-077","M70-078","M70-079","M70-080","M70-081","M70-082","M70-083-01","M70-083-02","M70-083-03","M70-083-04","M70-083-05","M70-083-07","M70-083-09","M70-083-10","M70-083-11","M70-083-12","M70-083-13","M70-083-14","M70-083-15","M70-083-16","M70-083-17","M70-083-18","M70-083-19","M70-083-20","M70-083-21","M70-083-22","M70-083-23","M70-083-24","M70-083-25","M70-083-26","M70-083-27","M70-083-28","M70-083-29","M70-083-30","M70-083-31","M70-083-32","M70-083-33","M70-083-34","M70-083-35","M70-083-36","M70-083-37","M70-083-38","M70-083-39","M70-083-40","M70-083-41","M70-083-42","M70-083-44","M70-083-45","M70-083-46","M70-083-47","M70-083-48","M70-083-49","M70-083-50","M70-083-51","M70-083-52","M70-083-53","M70-083-54","M70-083-55","M70-083-56","M70-083-58","M70-083-59","M70-083-60","M70-083-61","M70-083-62","M70-083-63","M70-083-64","M70-083-65","M70-083-66","M70-083-67","M70-083-68","M71-002","M71-007","M71-009","M71-042","M72-011","M72-032","M72-039","M73-037","M73-041","M73-070","M73-071","M73-072","M73-073","M73-074","M73-075","M73-076-01/03","M73-077-01/04","M74-006","M74-015","M74-017","M74-018","M74-021","M74-022","M74-023","M74-024","M74-025","M74-026","M74-027","M74-028","M74-029","M74-030","M74-031","M74-032","M74-033","M74-034","M74-035","M74-036","M74-037","M74-038","M74-039","M74-040","M74-041","M74-042","M74-118","M74-119-01","M74-119-02","M74-120","M74-121","M74-122","M74-123","M74-124","M74-125","M75-026","M75-027","M75-028","M75-029","M75-031","M75-032","M75-033","M75-034","M75-035","M75-036","M75-037","M75-038","M75-039","M75-040","M75-041","M75-042","M75-043","M75-044","M75-045","M75-046","M75-047","M75-049","M75-052","M75-059","M75-068a-01","M75-070","M75-072","M75-074","M76-019","M76-031","M76-032","M76-033","M76-034","M76-035","M76-036","M76-037","M76-038","M76-039-01-01/02","M76-039-02-01/02","M76-040","M77-005","M77-012","M77-013","M77-014","M77-016","M77-017","M77-018","M77-019","M77-021","M77-022","M77-024","M77-025","M77-026","M77-027","M77-028","M77-029","M77-030","M77-031","M77-032","M77-033","M77-034","M77-035","M77-037","M77-039","M77-040","M77-041","M77-042","M77-043","M77-044","M77-046","M77-047","M77-049","M77-050","M77-051","M77-053","M77-054","M77-055","M77-056","M77-057","M77-058","M77-059","M77-060","M77-061","M77-062","M77-063","M77-064","M77-065","M77-066","M77-067","M77-068","M77-069","M77-070","M77-071","M77-072","M77-073","M77-074","M77-075","M77-076","M77-077","M77-078","M77-079","M77-080","M77-081","M77-082","M77-083","M77-084","M77-085","M77-087","M77-089","M77-090","M77-091","M77-092","M77-096","M77-098","M77-100","M77-102","M77-103","M77-104","M77-105","M77-106","M77-107","M77-108","M77-109","M77-111-01","M77-111-02","M77-111-03","M77-111-04","M77-111-05","M77-111-06","M77-111-07","M77-111-08","M77-111-09","M77-111-10","M77-111-11","M77-111-12","M77-111-13","M77-111-14","M77-111-15","M77-111-16","M77-111-17","M77-111-18","M77-111-19","M77-111-20","M77-111-21","M77-111-22","M77-111-23-1","M77-111-23-2","M77-111-24","M77-111-25","M77-111-26","M77-111-27","M77-111-28","M77-111-29","M77-111-30","M77-111-31","M77-111-32","M77-111-33","M77-111-34","M77-111-35","M77-111-36","M77-111-37","M77-111-38","M77-111-39","M77-111-40","M77-111-41","M77-111-42","M77-111-43","M77-111-44","M77-111-45","M77-111-46-01/02","M77-111-47-01/02","M77-111-48","M77-111-49","M77-111-50","M77-111-51","M77-111-52","M77-111-53","M77-111-56","M77-111-57","M77-111-58","M77-111-59","M77-111-60","M77-111-61","M77-114","M77-125","M78-006","M78-012","M78-013","M78-014","M78-015","M78-016","M78-017","M78-018","M78-033","M78-058","M79-006","M79-008","M79-009","M79-017","M79-018","M79-019","M79-023-19","M79-036","M79-037","M79-038","M79-039","M79-040","M79-041","M79-042","M79-043","M79-044","M79-045","M79-046","M79-047","M79-048","M79-050","M79-065","M80-020","M80-022-01/02","M80-039","M80-040","M80-041","M80-042","M80-061","M80-063-01/02","M80-065","M82-006","M82-020","M82-022","M82-029","M82-038","M82-039","M82-040","M82-042","M82-043","M82-044","M82-045","M82-046","M82-053","M83-007-01","M83-007-02","M83-007-08","M83-007-10","M83-007-108","M83-007-11","M83-007-110","M83-007-111","M83-007-113","M83-007-115","M83-007-12","M83-007-13","M83-007-15","M83-007-16","M83-007-18","M83-007-19","M83-007-20","M83-007-21","M83-007-27","M83-007-30","M83-007-33","M83-007-44","M83-007-49","M83-007-55","M83-007-57","M83-007-58","M83-007-71","M83-007-73","M83-007-76","M83-007-82","M83-007-97","M83-027","M83-028","M83-031","M84-033","M84-037","M84-083","M84-084","M85-017","M85-018","M85-019","M85-023","M85-025","M86-012","M86-013","M86-034","M86-035-01","M86-035-01/03","M86-035-02","M86-035-03","M86-036","M86-037","M86-057","M86-065","M87-002","M87-031-01","M87-031-02","M87-031-03","M87-031-04","M87-031-05","M87-031-06","M87-031-07","M87-031-08","M87-031-09","M87-031-10","M87-031-12","M87-031-13","M87-031-15","M87-031-16","M87-031-17","M87-031-23","M87-031-24","M87-031-25","M87-031-26","M87-031-27","M87-031-28","M87-031-29","M87-031-30","M87-031-31","M87-031-32","M87-031-33","M87-031-34","M87-031-35","M87-031-37","M87-031-38","M87-033","M87-085","M87-088-01","M87-088-01/06","M87-088-02","M87-088-03","M87-088-04","M87-088-05","M87-088-06","M87-099","M87-100-01","M87-100-01/12","M87-100-03","M87-100-04","M87-100-05","M87-100-06","M87-100-07","M87-100-08","M87-101-01/06","M87-104","M88-001-02","M88-001-03","M88-001-04","M88-001-05","M88-001-06","M88-001-07","M88-001-08","M88-001-09","M88-009","M88-036-01","M88-036-02","M88-036-03","M88-036-04","M88-036-05","M88-036-06","M88-036-07","M88-036-08","M88-036-09","M88-036-10","M88-036-11","M88-036-12","M88-036-13","M88-036-14","M88-036-15","M88-036-16","M88-036-17","M88-036-18","M88-036-19","M88-036-20","M88-036-21","M88-036-22","M88-048","M89-012","M89-054-01/02","M89-055","M89-056","M89-056-01","M89-056-02","M89-056-03","M89-056-04","M89-056-05","M89-056-06","M90-012-01","M90-012-01/05","M90-012-02","M90-012-021/3","M90-012-03-01/02","M90-012-04","M90-013","M90-014","M90-014-01","M90-014-02","M90-014-03","M90-021","M90-027","M90-029","M90-030","M90-031","M90-032","M90-040","M91-005-01","M91-005-02","M91-005-03","M91-029","M91-030","M91-032","M91-033","M91-037-01/06","M92-030-01","M92-031","M92-032","M92-033-01/05","M93-027","M93-028","M93-029","M93-030-01/02","M93-032","M94-008","M94-010","M94-011","M94-013","M94-015","M95-001","M95-002","M95-026","M95-029","M95-030","M95-034","M95-038","M95-042","M95-043","M96-024","M96-030","M96-043","M98-038","M98-039","M98-040","M98-041","M98-042","M98-043","M98-044","M98-045","M98-046","M98-047","M98-048","M98-049","M98-050","M98-051","M98-052","M98-056","M98-057","M98-058","M98-059","M98-061","M98-062","M98-063","M98-064","M98-065","M98-066","M98-067","M98-068","M98-069","M98-070","M98-071","M99-013","M99-015","M99-017","PKCZ00006","PKCZ00007","PKCZ00008","PKCZ00009","PKCZ00-01","PKCZ00-01-01","PKCZ00-01-02","PKCZ00-01-03","PKCZ00-01-04","PKCZ00-01-05","PKCZ00-01-06","PKCZ00-01-07","PKCZ00011","PKCZ00-02","PKCZ00-02-01","PKCZ00-02-02","PKCZ00-02-03","PKCZ00-02-04","PKCZ00-02-05","PKCZ00021","PKCZ00022","PKCZ00022-01","PKCZ00022-02","PKCZ00022-03","PKCZ00027","PKCZ00029","PKCZ00030","PKCZ00-03-01","PKCZ00-03-02","PKCZ00-03-03","PKCZ00-03-04","PKCZ00-03-05","PKCZ00-03-06","PKCZ00-03-07","PKCZ00-03-08","PKCZ00031","PKCZ00032","PKCZ00033","PKCZ00034","PKCZ00-035","PKCZ00037","PKCZ00038","PKCZ00039","PKCZ00-04","PKCZ00040","PKCZ00042","PKCZ00043","PKCZ00044","PKCZ00045","PKCZ00046","PKCZ00047","PKCZ00048","PKCZ00049","PKCZ00-05","PKCZ00050","PKCZ00051","PKCZ00052","PKCZ00053","PKCZ00054","PKCZ00055","PKCZ00056","PKCZ00057","PKCZ00058","PKCZ00059","PKCZ00-06","PKCZ00060","PKCZ00061","PKCZ00062","PKCZ00064-01","PKCZ00064-02","PKCZ00064-03","PKCZ00066","PKCZ00068","PKCZ00069","PKCZ00-07","PKCZ00070","PKCZ00-07-01","PKCZ00-07-02","PKCZ00-07-03","PKCZ00-07-04","PKCZ00-07-05","PKCZ00-07-06","PKCZ00-07-07","PKCZ00-07-08","PKCZ00072","PKCZ00073","PKCZ00073-01","PKCZ00073-02","PKCZ00075","PKCZ00075-01","PKCZ00075-02","PKCZ00075-03","PKCZ00075-04","PKCZ00075-05","PKCZ00075-06","PKCZ00075-07","PKCZ00075-08","PKCZ00075-09","PKCZ00075-10","PKCZ00077","PKCZ00078","PKCZ00-08","PKCZ00080-01","PKCZ00080-02","PKCZ00-08-01","PKCZ00-08-02","PKCZ00-08-03","PKCZ00081","PKCZ00082","PKCZ00083","PKCZ00083-01","PKCZ00083-02","PKCZ00083-03","PKCZ00083-04","PKCZ00084","PKCZ00084-01","PKCZ00084-02","PKCZ00085","PKCZ00087","PKCZ00088","PKCZ00089","PKCZ00089-01","PKCZ00089-02","PKCZ00089-03","PKCZ00-09","PKCZ00090","PKCZ00-09-01","PKCZ00-09-02","PKCZ00092","PKCZ00092-01","PKCZ00092-02","PKCZ00092-03","PKCZ00092-04","PKCZ00093","PKCZ00094","PKCZ00095-01","PKCZ00095-02","PKCZ00096","PKCZ00096-01","PKCZ00096-02","PKCZ00097","PKCZ00098","PKCZ00-10","PKCZ00-10-02","PKCZ00101","PKCZ00102","PKCZ00103","PKCZ00-11","PKCZ00-11-01","PKCZ00-11-02","PKCZ00-11-03","PKCZ00113","PKCZ00113-3","PKCZ00114-1/4","PKCZ00115","PKCZ00116","PKCZ00117","PKCZ00118","PKCZ00-12","PKCZ00120","PKCZ00126","PKCZ00127","PKCZ00128","PKCZ00129","PKCZ00-13","PKCZ00130","PKCZ00130-01","PKCZ00130-02","PKCZ00131","PKCZ00134","PKCZ00-14","PKCZ00-14-01","PKCZ00-14-02","PKCZ00142-1","PKCZ00142-2","PKCZ00142-3","PKCZ00142-4","PKCZ00142-5","PKCZ00142-6","PKCZ00142-7","PKCZ00142-8","PKCZ00142-9","PKCZ00144","PKCZ00145","PKCZ00146","PKCZ00148","PKCZ00-15","PKCZ00-15-01","PKCZ00-15-02","PKCZ00-15-03","PKCZ00152","PKCZ00153","PKCZ00154","PKCZ00154-01","PKCZ00154-02","PKCZ00154-03","PKCZ00154-04","PKCZ00154-05","PKCZ00154-06","PKCZ00154-07","PKCZ00154-08","PKCZ00154-09","PKCZ00154-10","PKCZ00154-11","PKCZ00154-12","PKCZ00154-13","PKCZ00154-14","PKCZ00154-15","PKCZ00154-16","PKCZ00154-17","PKCZ00159-01","PKCZ00-16","PKCZ00162","PKCZ00163","PKCZ00164","PKCZ00165","PKCZ00166","PKCZ00167","PKCZ00167-01","PKCZ00167-02","PKCZ00167-03","PKCZ00167-04","PKCZ00167-05","PKCZ00167-06","PKCZ00167-07","PKCZ00167-08","PKCZ00167-09","PKCZ00167-10","PKCZ00167-11","PKCZ00167-12","PKCZ00168","PKCZ00169","PKCZ00-17","PKCZ00171","PKCZ00173-01","PKCZ00175-01","PKCZ00175-02","PKCZ00176","PKCZ00177","PKCZ00-18","PKCZ00182","PKCZ00184","PKCZ00185","PKCZ00187","PKCZ00-19","PKCZ00192-01","PKCZ00192-02","PKCZ00193","PKCZ00193-01","PKCZ00193-02","PKCZ00193-03","PKCZ00193-04","PKCZ00193-05","PKCZ00193-06","PKCZ00193-07","PKCZ00195","PKCZ00199","PKCZ00199-01","PKCZ00199-02","PKCZ00199-03","PKCZ00199-04","PKCZ00200","PKCZ00204","PKCZ00205","PKCZ00208","PKCZ00209","PKCZ00210","PKCZ00214","PKCZ00219","PKCZ00220","PKCZ00221","PKCZ00222","PKCZ00223","PKCZ00225","PKCZ00226","PKCZ00227","PKCZ00229-01","PKCZ00231","PKCZ00233","PKCZ00234","PKCZ00235","PKCZ00236","PKCZ00237","PKCZ00238","PKCZ00241","PKCZ00246","PKCZ00251","PKCZ00261","PKCZ00262","PKCZ00264","PKCZ00267-01","PKCZ00267-02","PKCZ00267-03","PKCZ00267-04","PKCZ00267-05","PKCZ00268","PKCZ00269","PKCZ00272","PKCZ00272-01","PKCZ00272-02","PKCZ00272-03","PKCZ00272-04","PKCZ00272-05","PKCZ00272-06","PKCZ00272-07","PKCZ00272-08","PKCZ00272-09","PKCZ00272-B","PKCZ00272-C","PKCZ00272-D","PKCZ00272-E","PKCZ00272-F","PKCZ00272-J","PKCZ00272-K","PKCZ00272-L","PKCZ00272-M","PKCZ00272-N","PKCZ00273","PKCZ00274","PKCZ00274-01","PKCZ00274-02","PKCZ00274-03","PKCZ00274-04","PKCZ00275","PKCZ00276","PKCZ00277","PKCZ00278","PKCZ00279","PKCZ00280","PKCZ00281","PKCZ00283","PKCZ00283-01","PKCZ00283-02","PKCZ00283-03","PKCZ00283-04","PKCZ00283-05","PKCZ00283-06","PKCZ00283-07","PKCZ00283-08","PKCZ00283-09","PKCZ00283-10","PKCZ00283-11","PKCZ00283-12","PKCZ00283-13","PKCZ00283-14","PKCZ00283-15","PKCZ00283-16","PKCZ00283-17","PKCZ00283-18","PKCZ00283-19","PKCZ00283-20","PKCZ00283-21","PKCZ00283-22","PKCZ00283-23","PKCZ00283-24","PKCZ00283-25","PKCZ00283-26","PKCZ00283-27","PKCZ00283-28","PKCZ00283-29","PKCZ00283-30","PKCZ00284","PKCZ00285","PKCZ00292","PKCZ00294-01","PKCZ00294-02","PKCZ00294-03","PKCZ00296","PKCZ00297","PKCZ00298","PKCZ00304","PKCZ00305","PKCZ00305-01","PKCZ00305-02","PKCZ00305-03","PKCZ00305-04","PKCZ00305-05","PKCZ00305-06","PKCZ00305-07","PKCZ00308","PKCZ00315","PKCZ00316","PKCZ00317","PKCZ00324-01","PKCZ00324-02","PKCZ00329","PKCZ00333","PKCZ00334-01","PKCZ00334-02","PKCZ00336","PKCZ00340","PKCZ00341","PKCZ00367","PKCZ00369","PKCZ00370","PKCZ00371","PKCZ00372","PKCZ00373","PKCZ00374","PKCZ00375","PKCZ00376-01","PKCZ00376-03","PKCZ00376-04","PKCZ00380","PKCZ00381","PKCZ00382","PKCZ00389","PKCZ00390","PKCZ00391","PKCZ00392","PKCZ00393","PKCZ00394","PKCZ00395","PKCZ00395-01","PKCZ00395-02","PKCZ00399","PKCZ00400","PKCZ00401","PKCZ00402","PKCZ00403","PKCZ00404","PKCZ00405","PKCZ00406","PKCZ00406-01","PKCZ00406-02","PKCZ00406-03","PKCZ00409","PKCZ00409-01","PKCZ00409-02","PKCZ00410","PKCZ00410-01","PKCZ00410-02","PKCZ00410-03","PKCZ00410-04","PKCZ00410-05","PKCZ00413","PKCZ00416","PKCZ00417-01","PKCZ00417-02","PKCZ00417-03","PKCZ00417-04","PKCZ00418","PKCZ00422","PKCZ00423","PKCZ00424","PKCZ00425","PKCZ00426","PKCZ00427","PKCZ00428","PKCZ00430","PKCZ00431","PKCZ00431-01","PKCZ00431-02","PKCZ00431-03","PKCZ00431-04","PKCZ00431-05","PKCZ00431-06","PKCZ00431-07","PKCZ00431-08","PKCZ00431-09","PKCZ00431-10","PKCZ00431-11","PKCZ00431-12","PKCZ00432","PKCZ00433","PKCZ00434","PKCZ00435","PKCZ00436","PKCZ00437","PKCZ00438","PKCZ00439","PKCZ00440","PKCZ00441","PKCZ00442","PKCZ00443","PKCZ00443-01","PKCZ00443-02","PKCZ00443-03","PKCZ00445","PKCZ00445-01","PKCZ00445-02","PKCZ00445-03","PKCZ00445-04","PKCZ00446","PKCZ00447","PKCZ00448","PKCZ00449","PKCZ00450","PKCZ00450-01","PKCZ00450-02","PKCZ00453","PKCZ00454","PKCZ00455","PKCZ00456","PKCZ00457","PKCZ00458","PKCZ00459","PKCZ00460","PKCZ00461","PKCZ00462","PKCZ00463","PKCZ00464","PKCZ00465","PKCZ00466","PKCZ00467","PKCZ00468","PKCZ00469","PKCZ00470","PKCZ00471","PKCZ00472","PKCZ00473","PKCZ00474","PKCZ00475","PKCZ00475-01","PKCZ00475-02","PKCZ00476","PKCZ00477","PKCZ00478","PKCZ00479","PKCZ00481","PKCZ00482","PKCZ00483","PKCZ00484","PKCZ00485","PKCZ00486","PKCZ00487","PKCZ00488","PKCZ00488-01","PKCZ00488-02","PKCZ00489","PKCZ00490","PKCZ00491","PKCZ00492","PKCZ00493","PKCZ00494","PKCZ00496","PKCZ00500","PKCZ00501","PKCZ00502","PKCZ00503","PKCZ00504","PKCZ00505","PKCZ00506","PKCZ00507","PKCZ00508","PKCZ00509","PKCZ00510","PKCZ00511","PKCZ00513","PKCZ00514","PKCZ00515","PKCZ00516","PKCZ00516-01","PKCZ00516-02","PKCZ00516-03","PKCZ00516-04","PKCZ00516-05","PKCZ00517","PKCZ00518","PKCZ00518-01","PKCZ00518-02","PKCZ00519","PKCZ00520","PKCZ00521","PKCZ00521-01/02","PKCZ00521-03/05","PKCZ00522","PKCZ00522-01","PKCZ00522-02","PKCZ00523","PKCZ00524","PKCZ00525","PKCZ00526","PKCZ00527","PKCZ00528","PKCZ00529","PKCZ00530","PKCZ00531","PKCZ00532","PKCZ00533","PKCZ00534","PKCZ00535","PKCZ00536","PKCZ00537","PKCZ00538","PKCZ00539","PKCZ00540","PKCZ00541","PKCZ00543-01","PKCZ00544","PKCZ00544-01","PKCZ00544-02","PKCZ00544-03","PKCZ00545","PKCZ00545-01","PKCZ00545-02","PKCZ00545-03","PKCZ00545-04","PKCZ00545-05","PKCZ00545-06","PKCZ00546","PKCZ00547","PKCZ00552","PKCZ00552-01","PKCZ00552-03","PKCZ01-01","PKCZ01-02","PKCZ01-02-01","PKCZ01-02-02","PKCZ01-02-03","PKCZ01-02-04","PKCZ01-02-05","PKCZ01-02-06","PKCZ01-11","PKCZ01-12","PKCZ01-13","PKCZ01-14","PKCZ01-14-01","PKCZ01-14-02","PKCZ01-14-03","PKCZ01-14-04","PKCZ01-14-05","PKCZ01-14-06","PKCZ01-14-07","PKCZ01-14-08","PKCZ01-14-09","PKCZ01-14-10","PKCZ01-14-11","PKCZ01-14-12","PKCZ01-14-13","PKCZ01-14-14","PKCZ01-14-15","PKCZ01-14-16","PKCZ01-14-17","PKCZ01-14-18","PKCZ01-14-19","PKCZ01-14-20","PKCZ01-14-21","PKCZ01-14-22","PKCZ01-14-23","PKCZ01-14-24","PKCZ04-001","PKCZ04-002","PKCZ04-003","PKCZ04-004","PKCZ04-005","PKCZ04-006","PKCZ04-007","PKCZ04-008","PKCZ04-009","PKCZ04-010","PKCZ04-011","PKCZ04-012","PKCZ04-013","PKCZ04-014","PKCZ04-015","PKCZ04-016","PKCZ04-017","PKCZ04-018","PKCZ04-019","PKCZ04-020","PKCZ04-021","PKCZ04-022","PKCZ04-022-01","PKCZ04-022-02","PKCZ04-022-03","PKCZ04-022-04","PKCZ04-022-05","PKCZ04-022-06","PKCZ04-022-07","PKCZ04-023","PKCZ04-023-01","PKCZ04-023-02","PKCZ04-023-03","PKCZ92-01","PKCZ92-02","PKCZ92-02-01","PKCZ92-02-02","PKCZ92-02-03","PKCZ92-02-04","PKCZ92-02-05","PKCZ92-02-06","PKCZ92-03","PKCZ92-03-01","PKCZ92-03-02","PKCZ92-03-03","PKCZ92-04","PKCZ92-04-01","PKCZ92-04-02","PKCZ92-05","PKCZ92-05-01","PKCZ92-05-02","PKCZ92-05-03","PKCZ92-06","PKCZ92-07","PKCZ92-07-01","PKCZ92-07-02","PKCZ92-07-03","PKCZ92-07-4","PKCZ92-07-5","PKCZ92-08","PKCZ92-09","PKCZ92-10","PKCZ92-11","PKCZ92-12","PKCZ92-12-01","PKCZ92-12-02","PKCZ92-12-03","PKCZ92-13","PKCZ92-14","PKCZ92-15","PKCZ92-16","PKCZ92-17","PKCZ93-01","PKCZ93-02","PKCZ93-03","PKCZ93-04","PKCZ93-04-01/02","PKCZ93-04-03/04","PKCZ93-05-01/02","PKCZ93-06","PKCZ93-07","PKCZ93-08","PKCZ93-09","PKCZ93-10","PKCZ93-11","PKCZ93-12","PKCZ93-13","PKCZ94-01","PKCZ94-02","PKCZ94-03","PKCZ94-04","PKCZ94-05","PKCZ94-05-01","PKCZ94-05-02","PKCZ94-05-03","PKCZ94-06","PKCZ94-07","PKCZ94-08","PKCZ94-10","PKCZ94-11","PKCZ94-12","PKCZ94-13","PKCZ94-14","PKCZ94-15","PKCZ94-16","PKCZ94-17","PKCZ94-18","PKCZ94-19","PKCZ94-19-01","PKCZ94-19-02","PKCZ94-20","PKCZ94-21","PKCZ94-22","PKCZ94-22-01","PKCZ94-22-02","PKCZ94-22-03","PKCZ94-22-04","PKCZ94-22-05","PKCZ94-22-06","PKCZ94-22-07","PKCZ94-22-08","PKCZ94-22-09","PKCZ94-22-10","PKCZ94-22-11","PKCZ94-22-12","PKCZ94-22-13","PKCZ94-22-14","PKCZ94-22-15","PKCZ94-22-16","PKCZ94-22-17","PKCZ94-22-18","PKCZ94-22-19","PKCZ94-22-20","PKCZ94-22-21","PKCZ94-22-22","PKCZ94-22-23","PKCZ94-22-24","PKCZ94-24","PKCZ94-24-01","PKCZ94-24-02","PKCZ94-24-03","PKCZ94-24-04","PKCZ94-24-05","PKCZ94-24-06","PKCZ94-24-07","PKCZ94-24-08","PKCZ94-25","PKCZ94-25-01","PKCZ94-25-02","PKCZ94-25-03","PKCZ94-25-04","PKCZ94-25-05","PKCZ94-25-06","PKCZ94-25-07","PKCZ94-25-08","PKCZ94-25-09","PKCZ94-25-10","PKCZ94-25-11","PKCZ94-26","PKCZ95-01","PKCZ95-02","PKCZ95-03","PKCZ95-03-01","PKCZ95-03-02","PKCZ95-05","PKCZ95-06","PKCZ95-07","PKCZ95-08","PKCZ95-09","PKCZ95-10","PKCZ95-11","PKCZ96-01","PKCZ96-02","PKCZ96-02-01","PKCZ96-02-02","PKCZ96-02-03","PKCZ96-02-04","PKCZ96-02-05","PKCZ96-03","PKCZ96-04","PKCZ96-05","PKCZ96-06","PKCZ96-07","PKCZ96-08","PKCZ96-08-01","PKCZ96-08-02","PKCZ96-08-03","PKCZ96-09","PKCZ96-10","PKCZ96-11","PKCZ96-12","PKCZ96-13","PKCZ96-15","PKCZ96-16","PKCZ96-17","PKCZ96-18","PKCZ96-19","PKCZ96-19-01","PKCZ96-19-02","PKCZ96-19-03","PKCZ96-20","PKCZ96-20-01","PKCZ96-20-02","PKCZ96-20-03","PKCZ96-20-04","PKCZ96-20-05","PKCZ96-20-06","PKCZ96-21","PKCZ97-01","PKCZ97-01-01","PKCZ97-01-02","PKCZ97-01-03","PKCZ97-01-04","PKCZ97-01-05","PKCZ97-01-06","PKCZ97-01-07","PKCZ97-01-08","PKCZ97-01-09","PKCZ97-01-10","PKCZ97-01-11","PKCZ97-01-12","PKCZ97-03","PKCZ97-05","PKCZ97-06","PKCZ97-07","PKCZ97-08","PKCZ98-01","PKCZ98-02","PKCZ98-03","PKCZ98-04","PKCZ98-05","PKCZ98-06","PKCZ98-07","PKCZ98-08","PKCZ98-09","PKCZ98-10","PKCZ98-11","PKCZ98-12","PKCZ98-13","PKCZ98-14","PKCZ98-15","PKCZ98-16","PKCZ98-17","PKCZ98-18","PKCZ98-19","PKCZ98-20","PKCZ98-21","PKCZ98-22","PKCZ98-23","PKCZ98-24","PKCZ98-25","PKCZ98-26","PKCZ98-27","PKCZ98-28","PKCZ98-29","PKCZ98-30","PKCZ98-31","PKCZ98-32","PKCZ98-33","PKCZ98-34","PKCZ98-35","PKCZ98-36","PKCZ98-37","PKCZ98-38","PKCZ98-39","PKCZ98-40","PKCZ98-41","PKCZ98-42","PKCZ98-43","PKCZ98-44","PKCZ98-45","PKCZ98-46","PKCZ98-47","PKCZ98-48","PKCZ98-49","PKCZ98-50","PKCZ98-51","PKCZ98-52","PKCZ98-53","PKCZ98-54","PKCZ98-55","PKCZ98-56","PKCZ98-57","PKCZ98-58","PKCZ98-59","PKCZ98-60","PKCZ98-61","PKCZ98-62","PKCZ98-63","PKCZ98-64","PKCZ98-65","PKCZ98-66","PKCZ98-67","PKCZ98-68","PKCZ98-69","PKCZ98-70","PKCZ98-71","PKCZ98-72","PKCZ98-73","PKCZ98-73-01","PKCZ98-73-02","PKCZ98-73-03","PKCZ98-73-04","PKCZ98-74","PKCZ98-75","PKCZ98-76","PKCZ98-77","PKCZ98-78","PKCZ98-79","PKCZ98-79-01","PKCZ98-79-02","PKCZ98-79-03","PKCZ98-79-04","PKCZ98-80","PKCZ98-80-01","PKCZ98-80-02","PKCZ98-80-03","PKCZ98-81","PKCZ98-82","PKCZ98-83","PKCZ99-01","PKCZ99-02","PKCZ99-03","PKCZ99-04","PKCZ99-05","PKCZ99-06","PKCZ99-07","PKCZ99-08","PKCZ99-09","PKCZ99-10","PKCZ99-10-01","PKCZ99-10-02","PKCZ99-10-03","PKCZ99-10-04","PKCZ99-10-05","PKCZ99-10-06","PKCZ99-10-07","PKCZ99-10-08","PKCZ99-10-09","PKCZ99-10-10","PKCZ99-10-11","PKCZ99-11","PKCZ99-12","PKCZ99-13","PKCZ99-14","rui-test"]

    catalog = plone.api.portal.get().portal_catalog

    print "+++ Unpublishing should not be published excel +++"
    total = len(list_to_unpublish)
    curr = 0
    for object_number in list_to_unpublish[:100]:
        curr += 1
        objects = catalog(identification_identification_objectNumber=object_number)
        print objects
        if objects:
            brain = objects[0]
            obj = brain.getObject()
            try:
                plone.api.content.transition(obj=obj, to_state="private")
                transaction.get().commit()
                print "Unpublishing %s / %s" %(curr, total)
            except:
                print "Failed to unpublish [%s]" %(object_number)
                pass
            
        else:
            print "Object number [%s] not found in the website" %(object_number)

    print "+++ FINISHED: Unpublishing should not be published excel +++"
    print "++++++++++++++++++++++++++++++"
    print "+++ Unpublishing copyright +++"
    total = len(list_to_unpublish_copyright)
    curr = 0
    for object_number in list_to_unpublish_copyright[:100]:
        curr += 1
        objects = catalog(identification_identification_objectNumber=object_number)
        print [b.getURL() for b in objects]
        if objects:
            brain = objects[0]
            obj = brain.getObject()
            plone.api.content.transition(obj=obj, to_state="private")
            transaction.get().commit()
            print "Unpublishing %s / %s" %(curr, total)
        else:
            print "Object number [%s] not found in the website" %(object_number)

    print "+++ FINISHED: Unpublishing copyright +++"
    return True





def addAuthorToTitles(path, limit=None):
    import transaction
    import plone.api
    from collective.leadmedia.utils import imageObjectCreated
    from plone.app.uuid.utils import uuidToCatalogBrain, uuidToObject

    catalog = plone.api.portal.get().portal_catalog
    collection = plone.api.content.get(path=path)
    objects = collection.queryCatalog(batch=False)
    if limit:
        objects = list(objects)[:limit]
    else:
        objects = list(objects)

    curr = 0
    total = len(objects)
    for brain in objects:
        curr += 1
        try:
            obj = brain.getObject()
            if obj.productionDating_productionDating:
                makers = obj.productionDating_productionDating[0]['makers']
                if makers:
                    maker = makers[0]
                    name = ""
                    if getattr(maker, 'portal_type', None) == "PersonOrInstitution":
                        name = getattr(maker, 'title', '')
                    else:
                        person = maker.to_object
                        name = getattr(person, 'title', '')

                    if name not in NOT_ALLOWED:
                        obj.title = "%s, %s" %(obj.title, name)
                        obj.reindexObject(idxs=["Title"])
                else:
                    pass

        except:
            raise

        print "%s / %s" %(curr, total)
        transaction.get().commit()

    return True


def fixAllCropsTranslation():
    import transaction
    import plone.api
    from collective.leadmedia.utils import imageObjectCreated
    from plone.app.uuid.utils import uuidToCatalogBrain, uuidToObject

    catalog = plone.api.portal.get().portal_catalog
    objects = catalog(portal_type=["Object"], hasMedia=True, path={"query":"/zm/en/collection", "depth": 100})

    objects = list(objects)
    total = len(objects)
    curr = 0
    for brain in objects:
        curr += 1
        try:
            if brain.leadMedia:
                img = uuidToObject(brain.leadMedia)
                imageObjectCreated(img, None)
                img.reindexObject()
        except:
            raise
        print "%s / %s" %(curr, total)
        transaction.get().commit()

    return True

def fixAllCrops():
    import transaction
    import plone.api
    catalog = plone.api.portal.get().portal_catalog
    objects = catalog(portal_type=["Object", "Event", "Document"], hasMedia=True)

    objects = list(objects)
    curr = 0
    for brain in objects:
        try:
            if brain.leadMedia:
                img = uuidToObject(brain.leadMedia)
                imageObjectCreated(img, None)
                img.reindexObject()
        except:
            pass
        print curr
        transaction.get().commit()

    return True


def fixTitles(path, limit=None):
    import plone.api
    collection = plone.api.content.get(path=path)
    objects = collection.queryCatalog(batch=False)
    if limit:
        objects = list(objects)[:limit]
    else:
        objects = list(objects)

    curr = 0
    total = len(objects)
    for brain in objects:
        curr += 1
        obj = brain.getObject()
        if not obj.identification_titleDescription_title:
            if obj.identification_taxonomy_temp:
                tax = obj.identification_taxonomy_temp[0]
                scientific_name = tax["scientific_name"]
                common_name = tax["common_name"]
                title = ""

                if scientific_name not in NOT_ALLOWED:
                    title = "%s"%(scientific_name)
                if common_name not in NOT_ALLOWED:
                    title = "%s, %s" %(scientific_name, common_name)

                
                names = getattr(obj, 'identification_objectName_objectname', None)
                object_name = ""
                if names:
                    name = names[0]['name']
                    if name:
                        objectname = name[0]
                        if objectname not in NOT_ALLOWED:
                            object_name = objectname
               
                if object_name:
                    if title:
                        title = "%s, %s" %(title, object_name)
                    else:
                        title = "%s" %(object_name)

                if title:    
                    obj.title = title
                    obj.reindexObject(idxs=["Title"])
        
        print "%s, %s" %(curr, total)

    return True

def fixCrops(path):
    import plone.api
    from collective.leadmedia.utils import imageObjectCreated

    collection = plone.api.content.get(path=path)
    objects = collection.queryCatalog(batch=False)
    objects = list(objects)[:100]
    for brain in objects:
        if brain.leadMedia:
            img = uuidToObject(brain.leadMedia)
            imageObjectCreated(img, None)
            img.reindexObject()

    return True

class ObjectFields(BrowserView):
    def get_object_body(self, object):
        if hasattr(object, 'text') and object.text != None:
            return object.text.output
        else:
            return ""

    def trim_white_spaces(self, text):
        if text != "" and text != None:
            if len(text) > 0:
                if text[0] == " ":
                    text = text[1:]
                if len(text) > 0:
                    if text[-1] == " ":
                        text = text[:-1]
                return text
            else:
                return ""
        else:
            return ""

    def create_author_name(self, value):
        comma_split = value.split(",")

        for i in range(len(comma_split)):       
            name_split = comma_split[i].split('(')
            
            raw_name = name_split[0]
            name_split[0] = self.trim_white_spaces(raw_name)
            name_artist = name_split[0]
            
            name_artist_link = '<a href="/%s/search?SearchableText=%s">%s</a>' % (getattr(self.context, 'language', 'nl'), name_artist, name_artist)
            name_split[0] = name_artist_link

            if len(name_split) > 1:
                if len(name_split[1]) > 0:
                    name_split[0] = name_artist_link + " "
        
            comma_split[i] = '('.join(name_split)

        _value = ", ".join(comma_split)

        return _value

    def create_materials(self, value):
        materials = value.split(',')
        _value = ""
        for i, mat in enumerate(materials):
            if i == (len(materials)-1):
                _value += '<a href="/%s/search?SearchableText=%s">%s</a>' % (getattr(self.context, 'language', 'nl'), mat, mat)
            else:
                _value += '<a href="/%s/search?SearchableText=%s">%s</a>, ' % (getattr(self.context, 'language', 'nl'), mat, mat)

        return _value

    def get_field_from_object(self, field, object):
        
        empty_field = ""
        
        value = getattr(object, field, "")
        if value != "" and value != None:
            return value
        
        return empty_field

    def get_field_from_schema(self, fieldname, schema):
        for name, field in schema:
            if name == fieldname:
                return field

        return None

    def transform_schema_field(self, name, field_value, choice=None, restriction=None, not_show=[]):
        try:
            if type(field_value) is list:
                new_val = []
                if choice == None:
                    for val in field_value:
                        if type(val) is unicode:
                            new_val.append(val)
                        elif type(val) is str:
                            new_val.append(val)
                        else:
                            for key, value in val.iteritems():
                                if key not in not_show:
                                    if value != "" and value != None and value != " ":
                                        if restriction != None:
                                            if value != restriction:
                                                if key in "name" and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                                    value = self.create_maker(value)
                                                if type(value) is list: 
                                                    new_val.append(value[0])
                                                else:
                                                    new_val.append(value)
                                        else:
                                            if key == "name" and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                                value = self.create_maker(value)
                                            if type(value) is list: 
                                                new_val.append(value[0])
                                            else:
                                                new_val.append(value)
                else:
                    for val in field_value:
                        if val[choice] != "" and val[choice] != None and val[choice] != " ":
                            if restriction != None:
                                if val[choice] != restriction:
                                    if choice == "name" and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                        new_val.append(self.create_maker(val[choice]))
                                    else:
                                        
                                        if type(val[choice]) is list: 
                                            if val[choice]:
                                                new_val.append(val[choice][0])
                                        else:
                                            new_val.append(val[choice])
                            else:
                                if choice in ["name", "author"] and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                    new_val.append(self.create_maker(val[choice]))
                                else:
                                    if type(val[choice]) is list: 
                                        if val[choice]:
                                            new_val.append(val[choice][0])
                                    else:
                                        new_val.append(val[choice])

                if len(new_val) > 0:
                    if name in ["exhibitions_exhibition", "productionDating_production", "labels", "seriesNotesISBN_notes_bibliographicalNotes",
                                "abstractAndSubjectTerms_notes", "abstractAndSubjectTerms_abstract_abstract",
                                "exhibitionsAuctionsCollections_exhibition", "exhibitionsAuctionsCollections_auction",
                                "exhibitionsAuctionsCollections_collection"]:
                        return '<p>'.join(new_val)
                    else:
                        for index, single_value in enumerate(new_val):
                            single_value = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', ''), single_value, single_value)
                            new_val[index] = single_value
                        return ', '.join(new_val)
                else:
                    return ""
            else:
                return field_value
        except:
            return ""


    def generate_identification_tab(self, identification_tab, object_schema, fields, object, field_schema):
        for field, choice in identification_tab:
            # Title field
            if field in ['title']:
                value = getattr(object, field, "")
                if value != "" and value != None and value != " " and 'collectie/natuurhistorie' not in self.context.absolute_url():
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Title')), "value": value})

            elif field in ['text']:
                val = getattr(object, field, "")
                if val:
                    value = val.output
                else:
                    value = ""
                if value != "" and value != None and value != " ":
                    object_schema[field_schema]['fields'].append({"title": "body", "value": value})
            
            # Regular fields
            elif field not in ['taxonomy_adlibtaxonomy']:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "" and schema_value != " ":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})

            # Taxonomy special case
            else:
                taxonomy = self.get_field_from_object(field, object)

                from zope.component import getSiteManager
                from zope.schema.interfaces import IVocabularyFactory
                
                sm = getSiteManager()
                domain = 'collective.taxonomy.adlibtaxonomy'
                factory = sm.queryUtility(IVocabularyFactory, name=domain)

                terms = []
                if factory is not None:
                    vocabulary = factory(self.context)
                    for identifier in taxonomy:
                        term = vocabulary.getTerm(identifier)
                        if term:
                            if term.title:
                                terms.append(term)

                for t_index in range(len(terms)):
                    term_title = terms[t_index].title
                    term_value = terms[t_index].value
                    split_term = term_title.split("/")
                    split_term.remove('')
                    for t_split_index in range(len(split_term)):
                        if split_term[t_split_index]:
                            new_term = "<a href='/%s/@@search?taxonomy_adlibtaxonomy=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), term_value, split_term[t_split_index])
                            split_term[t_split_index] = new_term
                    fixed_split_term = " > ".join(split_term)
                    terms[t_index] = fixed_split_term

                if terms:
                    #print terms
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Scientific name')), "value": '<p> '.join(terms)})


                """
                taxonomy = self.get_field_from_object(field, object)
                if len(taxonomy) > 0:
                    common_names = []
                    scientific_names = []

                    for tax in taxonomy:
                        taxonomy_elem = tax

                        scientific_name = taxonomy_elem['scientific_name']
                        common_name = taxonomy_elem['common_name']
                        if scientific_name not in NOT_ALLOWED:
                            scientific_names.append("<a href='/%s/@@search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), scientific_name, scientific_name))

                        if common_name not in NOT_ALLOWED:
                            common_names.append("<a href='/%s/@@search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), common_name, common_name))


                    if scientific_names:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Scientific name')), "value": ', '.join(scientific_names)})
                    if common_names:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Common name')), "value": ', '.join(common_names)})"""

                """taxonomy = self.get_field_from_object(field, object)
                if len(taxonomy) > 0:
                    scientific_names = []
                    common_names_list = []

                    for taxonomy_elem in taxonomy:
                        scientific_name = taxonomy_elem['scientific_name']
                        if scientific_name:
                            tax = scientific_name[0]
                            tax_obj = None
                            if IRelationValue.providedBy(tax):
                                tax_obj = tax.to_object
                            else:
                                tax_obj = tax

                            if tax_obj:
                                tax_title = getattr(tax_obj, 'title', '')
                                if tax_title:
                                    scientific_names.append(tax_title)

                                common_name = getattr(tax_obj, 'taxonomicTermDetails_commonName', '')
                                if common_name:
                                    common_names = []
                                    for line in common_name:
                                        if line['commonName'] not in [None, '', ' ']:
                                            common_names.append(line['commonName'])

                                    common_names_list.extend(common_names)
                    
                    if scientific_names:     
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Scient. name')), "value": ', '.join(scientific_names)})
                    
                    if common_names_list:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Common name')), "value": ', '.join(common_names_list)})"""


    def create_maker(self, name, url=False):
        maker = []

        if name not in NOT_ALLOWED:
            name_split = name.split(",")

            if len(name_split) > 0:
                if len(name_split) > 1:
                    maker.append(name_split[-1])
                    maker.append(name_split[0])
                else:
                    maker.append(name_split[0])

            new_maker = ' '.join(maker)
            if url:
                new_maker = new_maker
            else:
                new_maker = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), new_maker, new_maker)
        else:
            return ""

        return new_maker

    def create_production_field(self, field, url=False):
        production = ""

        maker = field['maker']
        qualifier = field['qualifier']
        #role = field['role']
        role = ""
        #place = field['place']
        place = ""

        production = self.create_maker(maker, url)

        if qualifier not in NOT_ALLOWED:
            if production:
                production = "%s, %s" %(qualifier, production)
            else:
                production = "%s" %(qualifier)

        if role not in NOT_ALLOWED:
            if production:
                production = "(%s) %s" %(role, production)
            else:
                production = "(%s)" %(role)

        if place not in NOT_ALLOWED:
            if production:
                production = "%s, %s" %(production, place)
            else:
                production = "%s" %(place)

        return production

    def create_period_field(self, field):
        period = ""
        start_date = field['date_early']
        start_date_precision = field['date_early_precision']
        end_date = field['date_late']
        end_date_precision = field['date_late_precision']

        result = ""

        if period != "" and period != None and period != " ":
            result = "%s" %(period)

        if start_date != "" and start_date != " ":
            if result:
                if start_date_precision != "" and start_date_precision != " ":
                    result = "%s, %s %s" %(result, start_date_precision, start_date)
                else:
                    result = "%s, %s" %(result, start_date)
            else:
                if start_date_precision != "" and start_date_precision != " ":
                    result = "%s %s" %(start_date_precision, start_date)
                else:
                    result = "%s" %(start_date)
    

        if end_date != "" and end_date != " ":
            if result:
                if end_date_precision != "" and end_date_precision != " ":
                    result = "%s - %s %s" %(result, end_date_precision, start_date)
                else:
                    result = "%s - %s" %(result, end_date)
            else:
                if end_date_precision != "" and end_date_precision != " ":
                    result = "%s %s" %(end_date_precision, start_date)
                else:
                    result = "%s" %(end_date)

        return result

    def get_url_by_uid(self, uid):
        brains = uuidToCatalogBrain(uid)
        if brains:
            return brains.getURL()

        return ""


    def generate_production_dating(self, production_dating_tab, object_schema, fields, object, field_schema):
        production_field = self.get_field_from_object('productionDating_productionDating', object)

        production_result = []
        # Generate production
        url = ""
        places = []
        for field in production_field:
            production = {}
            if field['makers']:
                try:
                    production['maker'] = field["makers"][0].title
                    url = self.get_url_by_uid(field["makers"][0].UID())
                except:
                    obj = getattr(field["makers"][0], 'to_object', None)
                    production['maker'] = getattr(obj, 'title', "")
                    url = self.get_url_by_uid(getattr(obj, 'UID', ""))
            else:
                production['maker'] = ""

            production['qualifier'] = field['qualifier']

            if field['role']:
                production['role'] = field['role'][0]
            else:
                production['role'] = ""

            if field['place']:
                production['place'] = field['place'][0]
                if production['place'] not in NOT_ALLOWED:
                    places.append(production['place'])
            else:
                production['place'] = ""

            result = self.create_production_field(production, url)
            if result not in NOT_ALLOWED:
                production_result.append(result)

        if len(production_result) > 0:
            production_value = '<p>'.join(production_result)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Maker')), "value": production_value})
        
        if places:
            place = '<p>'.join(places)
            if place:
                field_label = "Vervaardigingsplaats" if getattr(self.context, 'language', 'nl') == "nl" else "Production place"
                object_schema[field_schema]['fields'].append({"title": self.context.translate(_(field_label)), "value": place})

        ## Generate Period
        period_field = self.get_field_from_object('productionDating_production_periods', object)

        period = []
        for field in period_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                period.append(field_value_searchable)

        school_field = self.get_field_from_object('productionDating_production_schoolStyles', object)

        school = []
        for field in school_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                school.append(field_value_searchable)

        datering_field = self.get_field_from_object('productionDating_dating_period', object)
        datering = []
        for field in datering_field:
            result = self.create_period_field(field)
            if result not in NOT_ALLOWED:
                datering.append(result)

        if len(datering) > 0:
            datering_value = ', '.join(datering)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Date')), "value": datering_value})

        if len(period) > 0:
            period_value = ', '.join(period)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Period')), "value": period_value})

        if len(school) > 0:
            school_value = ', '.join(school)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('School / style')), "value": school_value})

    def generate_production_dating_tab(self, production_dating_tab, object_schema, fields, object, field_schema):

        ## Generate Author
        production_field = self.get_field_from_object('productionDating_production', object)
        production = []
        for field in production_field:
            result = self.create_production_field(field)
            if result not in NOT_ALLOWED:
                production.append(result)

        if len(production) > 0:
            production_value = '<p>'.join(production)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Maker')), "value": production_value})

        ## Generate Period
        period_field = self.get_field_from_object('productionDating_production_periods', object)

        period = []
        for field in period_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                period.append(field_value_searchable)

        school_field = self.get_field_from_object('productionDating_production_schoolStyles', object)

        school = []
        for field in school_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                school.append(field_value_searchable)

        datering_field = self.get_field_from_object('productionDating_dating_period', object)
        datering = []
        for field in datering_field:
            result = self.create_period_field(field)
            if result not in NOT_ALLOWED:
                datering.append(result)

        if len(datering) > 0:
            datering_value = ', '.join(datering)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Date')), "value": datering_value})

        if len(period) > 0:
            period_value = ', '.join(period)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Period')), "value": period_value})

        if len(school) > 0:
            school_value = ', '.join(school)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('School / style')), "value": school_value})

    def create_dimension_field(self, field):
        new_dimension_val = []
        dimension_result = ""

        for val in field:
            dimension = ""
            if val['value'] != "":
                dimension = "%s" %(val['value'])
            if val['units'] != "":
                dimension = "%s %s" %(dimension, val['units'])
            if val['dimension'] != "" and val['dimension'] != []:
                dimension = "%s: %s" %(val['dimension'][0], dimension)
            if val['part'] not in NOT_ALLOWED:
                dimension = "%s (%s)" %(dimension, val['part'])

            new_dimension_val.append(dimension)

        dimension_result = '<p>'.join(new_dimension_val)
        
        return dimension_result

    def generate_physical_characteristics_tab(self, physical_characteristics_tab, object_schema, fields, object, field_schema):
        
        for field, choice, restriction in physical_characteristics_tab:
            if field == 'physicalCharacteristics_dimension':
                dimension_field = getattr(object, 'physicalCharacteristics_dimension', None)
                if dimension_field != None:
                    dimension = self.create_dimension_field(dimension_field)
                    ## add to schema
                    if dimension != "" and dimension != None:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Dimensions')), "value": dimension})
            else:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})


    def generate_associations_tab(self, associations_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in associations_tab:
            if field == "associations_associatedPersonInstitutions":
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue:
                    title = fieldvalue.title
                    associations_field = self.get_field_from_object('associations_associatedPersonInstitutions', object)

                    result = []
                    for line in associations_field:
                        names = line["names"]
                        if names:
                            name = names[0].title
                            url = self.get_url_by_uid(names[0].UID())
                            new_name = self.create_maker(name, url)
                            result.append(new_name)

                    final_result = "<p>".join(result)
                    if final_result != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": final_result})

            else:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})
    
    def generate_reproductions_tab(self, reproductions_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in reproductions_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    if field == "reproductions_reproduction":
                        title = "Reference"
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})    

    def generate_recommendations_tab(self, recommendations_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in recommendations_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})     

    def generate_location_tab(self, location_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in location_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})


    def generate_fieldcollection_tab(self, fieldcollection_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in fieldcollection_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    if field == 'fieldCollection_habitatStratigraphy_stratigraphy':
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Geologisch tijdvak')), "value": schema_value})
                    else:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})


    def generate_exhibitions_tab_temp(self, exhibitions_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction, not_show in exhibitions_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice, restriction, not_show)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})

    def generate_exhibition_tab(self, exhibitions_tab, object_schema, fields, object, field_schema):

        relations = []
        related_exhibitions = []

        def get_url_by_uid(context, uid):
            brain = uuidToCatalogBrain(uid)
            if brain:
                return brain.getURL()

            return ""

        for field, choice, restriction, not_show in exhibitions_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)
                if value:
                    for val in value:
                        exhibition = val['exhibitionName']
                        if exhibition:
                            rel = exhibition[0]
                            rel_obj = None
                            if IRelationValue.providedBy(rel):
                                rel_obj = rel.to_object
                            else:
                                rel_obj = rel

                            if rel_obj:
                                rel_url = get_url_by_uid(self.context, rel_obj.UID())
                                rel_title = rel_obj.title
                                related_exhibitions.append("<a href='%s'>%s</a>"%(rel_url, rel_title))

                                rel_date_start = ""
                                rel_date_end = ""
                                if hasattr(rel_obj, 'start_date'):
                                    rel_date_start = rel_obj.start_date

                                if hasattr(rel_obj, 'end_date'):
                                    rel_date_end = rel_obj.end_date

                                if rel_date_start != "":
                                    try:
                                        date_start = rel_date_start.strftime('%Y-%m-%d')
                                    except:
                                        rel_date_start = ""

                                if rel_date_end != "":
                                    try:
                                        date_end = rel_date_end.strftime('%Y-%m-%d')
                                    except:
                                        rel_date_end = ""


                                final_date = ""
                                if rel_date_start != "" and rel_date_end != "":
                                    final_date = "%s t/m %s" %(date_start, date_end)

                                if final_date != "":
                                    related_exhibitions.append(final_date)

                                # organisator
                                orgs = []
                                locations = []
                                places = []

        if len(related_exhibitions) > 0:
            related_exhibitions_value = '<p>'.join(related_exhibitions)
            object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Exhibition name')), 'value': related_exhibitions_value})


    def generate_exhibitions_tab(self, exhibitions_tab, object_schema, fields, object, field_schema):
        relations = getattr(object, 'exhibitions_exhibition', None)

        if relations:
            related_exhibitions = []
            for rel in relations:
                rel_obj = None
                if IRelationValue.providedBy(rel):
                    rel_obj = rel.to_object
                else:
                    rel_obj = rel

                rel_url = rel_obj.absolute_url()
                rel_title = rel_obj.title
                related_exhibitions.append("<a href='%s'>%s</a>"%(rel_url, rel_title))

                rel_date_start = ""
                rel_date_end = ""
                if hasattr(rel_obj, 'start_date'):
                    rel_date_start = rel_obj.start_date

                if hasattr(rel_obj, 'end_date'):
                    rel_date_end = rel_obj.end_date

                if rel_date_start != "":
                    date_start = rel_date_start.strftime('%Y-%m-%d')

                if rel_date_end != "":
                    date_end = rel_date_start.strftime('%Y-%m-%d')

                final_date = ""
                if rel_date_start != "" and rel_date_end != "":
                    final_date = "%s t/m %s" %(date_start, date_end)

                if final_date != "":
                    related_exhibitions.append(final_date)

        if len(related_exhibitions) > 0:
            related_exhibitions_value = '<p>'.join(related_exhibitions)
            object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Exhibitions')), 'value': related_exhibitions_value})

    def generate_labels_tab(self, labels_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in labels_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)
                if len(value) > 1:
                    value = [value[0]]
                schema_value = self.transform_schema_field(field, value, choice, restriction)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})

    def generate_related_books_tab(self, object_schema, fields, object, field_schema):
        if checkPermission('cmf.ManagePortal', self.context):
            intids = getUtility(IIntIds)
            catalog = getUtility(ICatalog)

            relations = sorted(catalog.findRelations({'to_id': intids.getId(object), 'from_attribute':'relations_relatedMuseumObjects'}))
            related_exhibitions = []
            for rel in relations:
                rel_obj = rel.from_object
                rel_url = rel_obj.absolute_url()
                rel_title = rel_obj.title
                related_exhibitions.append("<a href='%s'>%s</a>"%(rel_url, rel_title))
            
            if len(related_exhibitions) > 0:
                related_exhibitions_value = '<p>'.join(related_exhibitions)
                object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Books')), 'value': related_exhibitions_value})


    def generate_documentation_tab(self, object_schema, fields, object, field_schema):
        if hasattr(object, 'documentation_documentation'):
            documentation = object.documentation_documentation
            docs = []

            if documentation:
                for doc in documentation:
                    try:
                        if doc['title'] != "":
                            new_doc = "%s" %(doc['title'])

                            if doc['pageMark'] != "":
                                new_doc = "%s, %s" %(new_doc, doc['pageMark'])

                            if doc['notes'] != "":
                                new_doc = "%s, %s" %(new_doc, doc['notes'])

                            docs.append(new_doc)
                    except:
                        pass

            if len(docs) > 0:
                schema_value = '<p>'.join(docs)
                object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Documentation')), 'value': schema_value})


    def get_all_fields_object(self, object):
        object_schema = {}

        object_schema["identification"] = {
            "fields": [],
            "name": self.context.translate(_("Identification"))
        }

        object_schema["production_dating"] = {
            "fields": [],
            "name": self.context.translate(_("Production & Dating"))
        }

        object_schema["physical_characteristics"] = {
            "fields": [],
            "name": self.context.translate(_("Physical Characteristics"))
        }

        object_schema["associations"] = {
            "fields": [],
            "name": self.context.translate(_("Associations"))
        }

        object_schema["reproductions"] = {
            "fields": [],
            "name": self.context.translate(_("Reproductions"))
        }

        object_schema["recommendations_requirements"] = {
            "fields": [],
            "name": self.context.translate(_("Credits"))
        }

        object_schema["location"] = {
            "fields": [],
            "name": self.context.translate(_("Location"))
        }

        object_schema["field_collection"] = {
            "fields": [],
            "name": self.context.translate(_("Field Collection"))
        }

        object_schema["exhibitions"] = {
            "fields": [],
            "name": self.context.translate(_("Exhibitions"))
        }

        object_schema["labels"] = {
            "fields": [],
            "name": self.context.translate(_("Labels"))
        }

        object_schema["books"] = {
            "fields": [],
            "name": self.context.translate(_("Books"))
        }

        object_schema["documentation"] = {
            "fields": [],
            "name": self.context.translate(_("Documentation"))
        }


        schema = getUtility(IDexterityFTI, name='Object').lookupSchema()
        fields = getFieldsInOrder(schema)

        identification_tab = [('identification_identification_collections', None), ('identification_identification_objectNumber', None),
                                ('identification_objectName_category', None), ('identification_objectName_objectname', 'name'),
                                ('title', None), ('taxonomy_adlibtaxonomy', None), ('text', None)]

        production_dating_tab = ['productionDating_production', 'productionDating_production_periods', 'productionDating_production_schoolStyles']

        physical_characteristics_tab = [('physicalCharacteristics_technique', 'technique', None), ('physicalCharacteristics_material', 'material', None),
                                        ('physicalCharacteristics_dimension', None, None)]

        associations_tab = [('associations_associatedSubjects', 'subject', None)]

        reproductions_tab = [('reproductions_reproduction', 'reference', None)]

        recommendations_tab = [('recommendationsRequirements_creditLine_creditLine', None, None)]

        location_tab = [('location_currentLocation', 'location_type', None)]

        fieldcollection_tab = [('fieldCollection_fieldCollection_places', None, None)]

        exhibitions_tab = [('exhibitions_exhibition', None, 'Zeeuws Museum', ['catObject'])]

        labels_tab = [('labels', 'text', None)]


        ## Identification tab
        try:
            self.generate_identification_tab(identification_tab, object_schema, fields, object, "identification")
        except:
            raise
            
        ## Vervaardiging & Datering tab
        #self.generate_production_dating_tab(production_dating_tab, object_schema, fields, object, "production_dating")
        try:
            self.generate_production_dating(production_dating_tab, object_schema, fields, object, "production_dating")
            #self.generate_production_dating_tab(production_dating_tab, object_schema, fields, object, "production_dating")
        except:
            raise
            
        ## Physical Characteristics
        try:
            self.generate_physical_characteristics_tab(physical_characteristics_tab, object_schema, fields, object, "physical_characteristics")
        except:
            pass

        ## Associations
        try:
            self.generate_associations_tab(associations_tab, object_schema, fields, object, "associations")
        except:
            pass
        ## Reproductions
        try:
            self.generate_reproductions_tab(reproductions_tab, object_schema, fields, object, "reproductions")
        except:
            pass
        ## Recommendations
        try:
            self.generate_recommendations_tab(recommendations_tab, object_schema, fields, object, "recommendations_requirements")
        except:
            pass
        ## Location
        try:
            self.generate_location_tab(location_tab, object_schema, fields, object, "location")
        except:
            pass
        ## Field collection
        try:
            self.generate_fieldcollection_tab(fieldcollection_tab, object_schema, fields, object, "field_collection")
        except:
            pass
        ## Exhibtions
        #self.generate_exhibitions_tab(exhibitions_tab, object_schema, fields, object, "exhibitions")
        try:
            self.generate_exhibition_tab(exhibitions_tab, object_schema, fields, object, "exhibitions")
        except:
            pass

        ## Labels
        try:
            self.generate_labels_tab(labels_tab, object_schema, fields, object, "labels")
        except:
            pass

        ## Books
        try:
            self.generate_related_books_tab(object_schema, fields, object, "books")
        except:
            pass

        ## Documentation
        try:
            self.generate_documentation_tab(object_schema, fields, object, "documentation")
        except:
            pass

        new_object_schema = []
        new_object_schema.append(object_schema['identification'])
        new_object_schema.append(object_schema['production_dating'])
        new_object_schema.append(object_schema['physical_characteristics'])
        new_object_schema.append(object_schema['associations'])
        #new_object_schema.append(object_schema['reproductions'])
        new_object_schema.append(object_schema['recommendations_requirements'])
        #new_object_schema.append(object_schema['location'])
        new_object_schema.append(object_schema['field_collection'])
        #new_object_schema.append(object_schema['exhibitions'])
        #new_object_schema.append(object_schema['labels'])
        new_object_schema.append(object_schema['books'])
        new_object_schema.append(object_schema['documentation'])

        return new_object_schema

    def getJSON(self):
        schema = []
        if self.context.portal_type == "Object":
            obj = self.context
            schema = self.get_all_fields_object(obj)
        else:
            schema = []

        return json.dumps({'schema':schema})


class ObjectLoggedInView(edit.DefaultEditForm):
    """ View class """
    def update(self):
        super(ObjectLoggedInView, self).update()
        for group in self.groups:
            for widget in group.widgets.values():
                if IDataGridField.providedBy(widget):
                    widget.auto_append = False
                    widget.allow_reorder = True
                alsoProvides(widget, IFormWidget)

        for widget in self.widgets.values():
            if IDataGridField.providedBy(widget) or IAjaxSelectWidget.providedBy(widget):
                widget.auto_append = False
                widget.allow_reorder = True
                alsoProvides(widget, IFormWidget)

    def get_groups(self):
        super(ObjectLoggedInView, self).update()
        for group in self.groups:
            for widget in group.widgets.values():
                if IDataGridField.providedBy(widget):
                    widget.auto_append = False
                    widget.allow_reorder = True
                alsoProvides(widget, IFormWidget)

        for widget in self.widgets.values():
            if IDataGridField.providedBy(widget) or IAjaxSelectWidget.providedBy(widget):
                widget.auto_append = False
                widget.allow_reorder = True
                alsoProvides(widget, IFormWidget)
                
        return self.groups

class ObjectAllTabsView(BrowserView):
    """ View class """

    general_widgets = {}
    general_widgets_order = GENERAL_WIDGETS
    
    def checkUserPermission(self):
        sm = getSecurityManager()
        if sm.checkPermission(ModifyPortalContent, self.context):
            return True
        return False

    def get_url_by_uid(self, uid):
        brains = uuidToCatalogBrain(uid)
        if brains:
            return brains.getURL()
        return ""

    def get_details(self):
        item = self.context
        item_uid = item.UID()
        
        details = {}
        details["title"] = item.Title()
        details["description"] = item.Description()
        details["image"] = ""

        #brain = uuidToCatalogBrain(item_uid)
        #if brain:
        #    leadmedia_uid = brain.leadMedia
        #    if leadmedia_uid:
        #        lead_media = uuidToCatalogBrain(leadmedia_uid)
        #        details['image'] = lead_media.getURL() + "/@@images/image/large"

        return details

class ObjectView(BrowserView):
    """ View class """

    general_widgets = {}
    general_widgets_order = GENERAL_WIDGETS

    template = ViewPageTemplateFile('../object_templates/view.pt')

    def checkUserPermission(self):
        sm = getSecurityManager()
        if sm.checkPermission(ModifyPortalContent, self.context):
            return True
        return False

    def checkObjectOnDisplay(self):
        try:
            brain = uuidToCatalogBrain(self.context.UID())
            return brain.object_on_display
        except:
            return False

    def get_url_by_uid(self, uid):
        brains = uuidToCatalogBrain(uid)
        if brains:
            return brains.getURL()
        return ""

    def get_text_from_labels(self):
        try:
            body_text = self.context.labels[0]['text']
            # transform text into html
            new_text = body_text.replace("\n", "<br>")
            return new_text
        except:
            body_text = ""

        return ""

    def get_details(self):
        item = self.context
        item_uid = item.UID()
        
        details = {}
        details["title"] = item.Title()
        details["description"] = item.Description()
        details["image"] = ""

        #brain = uuidToCatalogBrain(item_uid)
        #if brain:
        #    leadmedia_uid = brain.leadMedia
        #    if leadmedia_uid:
        #        lead_media = uuidToCatalogBrain(leadmedia_uid)
        #        details['image'] = lead_media.getURL() + "/@@images/image/large"

        return details

class get_nav_objects(BrowserView):
    """
    Utils
    """

    def generate_related_exhibitions_objects(self, tab, object_schema, fields, object, field_schema):
        for field, choice in tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                related_objects = self.get_field_from_object(field, object)
                if len(related_objects) > 0:
                    temp_schema = []

                    for rel in related_objects:
                        rel_object = rel.to_object
                        temp_schema.append("<a href='%s'>%s</a>" %(rel_object.absolute_url(), rel_object.title))

                    if len(temp_schema) > 0:
                        title = fieldvalue.title
                        new_schema = {"title": self.context.translate(_book(title)), "value": "<p>".join(temp_schema)}
                        object_schema[field_schema]['fields'].append(new_schema)

    def generate_related_museum_objects(self, tab, object_schema, fields, object, field_schema):
        for field, choice in tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                related_objects = self.get_field_from_object(field, object)
                if len(related_objects) > 0:
                    temp_schema = []

                    for rel in related_objects:
                        rel_object = rel.to_object
                        temp_schema.append("<a href='%s'>%s</a>" %(rel_object.absolute_url(), rel_object.title))

                    if len(temp_schema) > 0:
                        title = fieldvalue.title
                        new_schema = {"title": self.context.translate(_book(title)), "value": "<p>".join(temp_schema)}
                        object_schema[field_schema]['fields'].append(new_schema)
                     

    def generate_regular_tab(self, tab, object_schema, fields, object, field_schema):
        for field, choice in tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_book(title)), "value": schema_value})

    def generate_series_isbn_tab(self, identification_tab, object_schema, fields, object, field_schema):
        for field, choice in identification_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_book(title)), "value": schema_value})

    def generate_title_author_tab(self, identification_tab, object_schema, fields, object, field_schema):
        for field, choice in identification_tab:
            # Title field
            if field in ['title']:
                value = getattr(object, field, "")
                if value != "" and value != None:
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_book('Title')), "value": value})
            
            # Regular fields
            else:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_book(title)), "value": schema_value})

    def get_all_fields_book(self, object):

        object_schema = {}

        object_schema["title_author"] = {
            "fields": [],
            "name": self.context.translate(_book("Title, author, imprint, collation"))
        }

        object_schema["series_notes_isbn"] = {
            "fields": [],
            "name": self.context.translate(_book("Series, notes, ISBN"))
        }

        object_schema["abstract_subject_terms"] = {
            "fields": [],
            "name": self.context.translate(_book("Abstract and subject terms"))
        }

        object_schema["reproductions"] = {
            "fields": [],
            "name": self.context.translate(_book("Reproductions"))
        }

        object_schema["exhibitions_auctions_collections"] = {
            "fields": [],
            "name": self.context.translate(_book("Exhibitions, auctions, collections"))
        }

        object_schema["relations"] = {
            "fields": [],
            "name": self.context.translate(_book("Relations"))
        }

        object_schema["free_fields_numbers"] = {
            "fields": [],
            "name": self.context.translate(_book("Free fields and numbers"))
        }

        object_schema["copies_and_shelf_marks"] = {
            "fields": [],
            "name": self.context.translate(_book("Copies and shelf marks"))
        }


        schema = getUtility(IDexterityFTI, name='Book').lookupSchema()
        fields = getFieldsInOrder(schema)

        title_author_tab = [('title', None), ('titleAuthorImprintCollation_titleAuthor_author', 'author'), 
                            ('titleAuthorImprintCollation_titleAuthor_illustrator', 'illustrator'),
                            ('titleAuthorImprintCollation_titleAuthor_statementOfRespsib', None),
                            ('titleAuthorImprintCollation_titleAuthor_corpAuthor', None),
                            ('titleAuthorImprintCollation_edition_edition', None),
                            ('titleAuthorImprintCollation_imprint_place', None),
                            ('titleAuthorImprintCollation_imprint_publisher', None),
                            ('titleAuthorImprintCollation_imprint_year', None),
                            ('titleAuthorImprintCollation_imprint_placePrinted', None)
                            ]

        series_notes_isbn_tab = [('seriesNotesISBN_series_series', 'series'),
                                ('seriesNotesISBN_series_subseries', 'subseries'),
                                ('seriesNotesISBN_notes_bibliographicalNotes', None),
                                ('seriesNotesISBN_ISBN_ISBN', 'ISBN'),
                                ('seriesNotesISBN_ISBN_ISSN', None)]

        abstract_subject_terms_tab = [('abstractAndSubjectTerms_materialType', None),
                                     ('abstractAndSubjectTerms_classNumber', None),
                                     ('abstractAndSubjectTerms_subjectTerm', 'subjectType'),
                                     ('abstractAndSubjectTerms_personKeywordType', 'name'),
                                     ('abstractAndSubjectTerms_geographicalKeyword', None),
                                     ('abstractAndSubjectTerms_period', None),
                                     ('abstractAndSubjectTerms_startDate', None),
                                     ('abstractAndSubjectTerms_endDate', None),
                                     ('abstractAndSubjectTerms_digitalReferences_reference', None),
                                     ('abstractAndSubjectTerms_abstract_abstract', None)]

        reproductions_tab = [('reproductions_reproduction', 'reference', None)]

        exhibitions_tab = []

        free_fields_tab = []

        copies_tab = [('copiesAndShelfMarks_copyDetails', None)]

        museum_objects_tab = [('relations_relatedMuseumObjects', None)]

        related_exhibitions = [('exhibitionsAuctionsCollections_relatedExhibitions', None)]

        ## Identification tab
        self.generate_title_author_tab(title_author_tab, object_schema, fields, object, "title_author")

        ## Series
        self.generate_series_isbn_tab(series_notes_isbn_tab, object_schema, fields, object, "series_notes_isbn")

        ## Abstract
        self.generate_regular_tab(abstract_subject_terms_tab, object_schema, fields, object, "abstract_subject_terms")

        ## Reproductions
        self.generate_reproductions_tab(reproductions_tab, object_schema, fields, object, "reproductions")

        ## Related exhibitions
        self.generate_related_exhibitions_objects(related_exhibitions, object_schema, fields, object, "exhibitions_auctions_collections")

        ## Exhibition
        self.generate_regular_tab(exhibitions_tab, object_schema, fields, object, "exhibitions_auctions_collections")

        ## Free fields
        self.generate_regular_tab(free_fields_tab, object_schema, fields, object, "free_fields_numbers")

        ## Copies and shelf marks
        self.generate_regular_tab(copies_tab, object_schema, fields, object, "copies_and_shelf_marks")
        
        ## Museum objects
        self.generate_related_museum_objects(museum_objects_tab, object_schema, fields, object, "relations")

        new_object_schema = []
        new_object_schema.append(object_schema['title_author'])
        new_object_schema.append(object_schema['series_notes_isbn'])
        new_object_schema.append(object_schema['abstract_subject_terms'])
        #new_object_schema.append(object_schema['reproductions'])
        new_object_schema.append(object_schema['exhibitions_auctions_collections'])
        new_object_schema.append(object_schema['relations'])
        new_object_schema.append(object_schema['free_fields_numbers'])
        new_object_schema.append(object_schema['copies_and_shelf_marks'])

        return new_object_schema

    def get_slideshow_items(self):
        item = self.context
        order = self.request.get('sort_on')
        catalog = getToolByName(self.context, 'portal_catalog')

        scale = "/@@images/image/large"

        items = []

        if item.portal_type == "Object":
            if hasattr(item, 'slideshow'):
                slideshow = item['slideshow']
                path = '/'.join(slideshow.getPhysicalPath())

                if order == None:
                    order = 'getObjPositionInParent'

                results = catalog.searchResults(path={'query': path, 'depth': 1}, sort_on=order)
                for brain in results:
                    url = brain.getURL()
                    slideshow_url = "%s%s" %(url, scale)
                    items.append({'url':slideshow_url})

        return json.dumps(items)


    def get_object_idx(self, results, object_id, is_folder):
        if is_folder:
            for idx, res in enumerate(results):
                if res.getId == object_id:
                    return idx
        else:
            for idx, res in enumerate(results):
                if res.getId() == object_id:
                    return idx

    def get_all_batch(self, collection_object, is_folder):
        catalog = getToolByName(self.context, 'portal_catalog')

        if is_folder:
            collection_obj = collection_object
        else:
            collection_obj = collection_object.getObject() # needs to getObject

        if is_folder:
            folder_path = '/'.join(collection_obj.getPhysicalPath())
            results = catalog(path={'query': folder_path, 'depth': 1})
        else:
            sort_on = ICollection(collection_obj).sort_on
            results = collection_obj.queryCatalog(batch=False, sort_on=sort_on)

        #print results
        return results

    def get_batch(self, collection_object, start, pagesize=33):
        collection_obj = collection_object.getObject() # needs to getObject

        results = collection_obj.queryCatalog(batch=True, b_start=int(start), b_size=pagesize)

        return results

    """
    Get prev obj
    """
    def get_prev_obj(self, start, collection_id):
        pagesize = 33
        
        if "/" not in start:
            object_id = self.context.getId()
            collection_object = uuidToCatalogBrain(collection_id)

            if collection_object:
                if collection_object.portal_type == "Collection":
                    ## Get Batch of collection
                    results = self.get_batch(collection_object, start, pagesize)
                    
                    ## Get prev item
                    object_idx = self.get_object_idx(results, object_id)                    
                    if object_idx > 0:
                        return results[object_idx-1]
                    else:
                        if results.has_previous:
                            page = results.previouspage
                            start = int(start)
                            start = (page * pagesize) - pagesize
                            b_results = self.get_batch(collection_object, start, pagesize)
                            last_element = b_results[b_results.items_on_page-1]
                            return last_element
                        else:
                            lastpage = results.lastpage
                            start = int(start)
                            start = (lastpage * pagesize) - pagesize
                            b_results = self.get_batch(collection_object, start, pagesize)
                            last_element = b_results[b_results.items_on_page-1]
                            return last_element
    """
    Get next obj
    """
    def get_next_obj(self, start, collection_id):
        pagesize = 33

        if "/" not in start:
            object_id = self.context.getId()
            collection_object = uuidToCatalogBrain(collection_id)

            if collection_object:
                if collection_object.portal_type == "Collection":
                    results = self.get_batch(collection_object, start, pagesize)
                    object_idx = self.get_object_idx(results, object_id)
                    if object_idx < results.items_on_page-1:
                        return results[object_idx+1]
                    else:
                        if results.has_next:
                            page = results.nextpage
                            page -= 1
                            start = int(start)
                            start = (page * pagesize)
                            b_results = self.get_batch(collection_object, start, pagesize)
                            first_element = b_results[0]
                            return first_element
                        else:
                            start = 0
                            b_results = self.get_batch(collection_object, start, pagesize)
                            first_element = b_results[0]
                            return first_element

    def get_collection_from_catalog(self, collection_id):
        uuid = collection_id
        collection_object = uuidToCatalogBrain(collection_id)
        if collection_object:
            if collection_object.portal_type == "Collection":
                return collection_object

        return None

    def get_all_items_from_collection(self, collection_object):
        items = {
            "list":[],
            "object_idx":0,
            'total':False
        }

        results = self.get_all_batch(collection_object, False)
        object_idx = self.get_object_idx(results, self.context.getId())
        items['object_idx'] = object_idx

        # NEEDS FIX - never used
        for obj in results:
            if obj != None:
                obj_media = ICanContainMedia(obj.getObject()).getLeadMedia() 
                if obj_media != None:
                    items['list'].append({'url':obj.getURL(),'image_url': obj_media.absolute_url()+'/@@images/image/large', 'object_id': obj.getId(), 'title':obj.Title(), 'description': obj.Description(), 'body': ""})

        return items

    """
    AJAX to get all items inside collection
    """
    def get_all_collection(self):
        # never used
        collection_id = self.request.get('collection_id')
        items = []
        
        if collection_id != None:
            collection_object = self.get_collection_from_catalog(collection_id)
            if collection_object != None:
                ## Get Batch of collection
                items = self.get_all_items_from_collection(collection_object)

        return json.dumps(items)

    def get_multiple_images(self, _object, view_type):
        images = []
        
        if view_type == 'double_view':
            limit = 2
            curr = 0
            if hasattr(_object, 'slideshow'):
                slideshow = _object['slideshow']
                if slideshow.portal_type == "Folder":
                    for img in slideshow:
                        curr += 1 
                        if slideshow[img].portal_type == 'Image':
                            images.append(slideshow[img].absolute_url()+'/@@images/image/large')
                        if curr >= limit:
                            break

        elif view_type == 'multiple_view':
            if hasattr(_object, 'slideshow'):
                slideshow = _object['slideshow']
                if slideshow.portal_type == "Folder":
                    for img in slideshow:
                        if slideshow[img].portal_type == 'Image':
                            images.append(slideshow[img].absolute_url()+'/@@images/image/large')

        res = sorted(images)
        return res

    def trim_white_spaces(self, text):
        if text != "" and text != None:
            if len(text) > 0:
                if text[0] == " ":
                    text = text[1:]
                if len(text) > 0:
                    if text[-1] == " ":
                        text = text[:-1]
                return text
            else:
                return ""
        else:
            return ""

    def create_author_name(self, value):
        comma_split = value.split(",")

        for i in range(len(comma_split)):       
            name_split = comma_split[i].split('(')
            
            raw_name = name_split[0]
            name_split[0] = self.trim_white_spaces(raw_name)
            name_artist = name_split[0]
            
            name_artist_link = '<a href="/'+getattr(self.context, 'language', 'nl')+'/search?SearchableText=%s">%s</a>' % (name_artist, name_artist)
            name_split[0] = name_artist_link

            if len(name_split) > 1:
                if len(name_split[1]) > 0:
                    name_split[0] = name_artist_link + " "
        
            comma_split[i] = '('.join(name_split)

        _value = ", ".join(comma_split)

        return _value

    def create_materials(self, value):
        materials = value.split(',')
        _value = ""
        for i, mat in enumerate(materials):
            if i == (len(materials)-1):
                _value += '<a href="/'+getattr(self.context, 'language', 'nl')+'/search?SearchableText=%s">%s</a>' % (mat, mat)
            else:
                _value += '<a href="/'+getattr(self.context, 'language', 'nl')+'/search?SearchableText=%s">%s</a>, ' % (mat, mat)

        return _value


    ## NEW FIELDS

    def get_field_from_object(self, field, object):
        
        empty_field = ""
        
        value = getattr(object, field, "")
        if value != "" and value != None:
            return value
        
        return empty_field

    def get_field_from_schema(self, fieldname, schema):
        for name, field in schema:
            if name == fieldname:
                return field

        return None

    def transform_schema_field(self, name, field_value, choice=None, restriction=None, not_show=[]):
        try:
            if type(field_value) is list:
                new_val = []
                if choice == None:
                    for val in field_value:
                        if type(val) is unicode:
                            new_val.append(val)
                        elif type(val) is str:
                            new_val.append(val)
                        else:
                            for key, value in val.iteritems():
                                if key not in not_show:
                                    if value != "" and value != None and value != " ":
                                        if restriction != None:
                                            if value != restriction:
                                                if key in "name" and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                                    value = self.create_maker(value)
                                                if type(value) is list: 
                                                    new_val.append(value[0])
                                                else:
                                                    new_val.append(value)
                                        else:
                                            if key == "name" and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                                value = self.create_maker(value)
                                            if type(value) is list: 
                                                new_val.append(value[0])
                                            else:
                                                new_val.append(value)
                else:
                    for val in field_value:
                        if val[choice] != "" and val[choice] != None and val[choice] != " ":
                            if restriction != None:
                                if val[choice] != restriction:
                                    if choice == "name" and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                        new_val.append(self.create_maker(val[choice]))
                                    else:
                                        
                                        if type(val[choice]) is list: 
                                            if val[choice]:
                                                new_val.append(val[choice][0])
                                        else:
                                            new_val.append(val[choice])
                            else:
                                if choice in ["name", "author"] and name not in ['exhibitions_exhibition','identification_objectName_objectname']:
                                    new_val.append(self.create_maker(val[choice]))
                                else:
                                    if type(val[choice]) is list: 
                                        if val[choice]:
                                            new_val.append(val[choice][0])
                                    else:
                                        new_val.append(val[choice])

                if len(new_val) > 0:
                    if name in ["exhibitions_exhibition", "productionDating_production", "labels", "seriesNotesISBN_notes_bibliographicalNotes",
                                "abstractAndSubjectTerms_notes", "abstractAndSubjectTerms_abstract_abstract",
                                "exhibitionsAuctionsCollections_exhibition", "exhibitionsAuctionsCollections_auction",
                                "exhibitionsAuctionsCollections_collection"]:
                        return '<p>'.join(new_val)
                    else:
                        for index, single_value in enumerate(new_val):
                            single_value = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(self.context.language, single_value, single_value)
                            new_val[index] = single_value
                        return ', '.join(new_val)
                else:
                    return ""
            else:
                return field_value
        except:
            return ""


    def generate_identification_tab(self, identification_tab, object_schema, fields, object, field_schema):
        for field, choice in identification_tab:
            # Title field
            if field in ['title']:
                value = getattr(object, field, "")
                if value != "" and value != None and value != " " and 'collectie/natuurhistorie' not in self.context.absolute_url():
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Title')), "value": value})

            elif field in ['text']:
                val = getattr(object, field, "")
                if val:
                    value = val.output
                else:
                    value = ""
                if value != "" and value != None and value != " ":
                    object_schema[field_schema]['fields'].append({"title": "body", "value": value})
            
            # Regular fields
            elif field not in ['taxonomy_adlibtaxonomy']:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "" and schema_value != " ":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})

            # Taxonomy special case
            else:
                taxonomy = self.get_field_from_object(field, object)

                from zope.component import getSiteManager
                from zope.schema.interfaces import IVocabularyFactory
                
                sm = getSiteManager()
                domain = 'collective.taxonomy.adlibtaxonomy'
                factory = sm.queryUtility(IVocabularyFactory, name=domain)

                terms = []
                if factory is not None:
                    vocabulary = factory(self.context)
                    for identifier in taxonomy:
                        term = vocabulary.getTerm(identifier)
                        if term:
                            if term.title:
                                terms.append(term)

                for t_index in range(len(terms)):
                    term_title = terms[t_index].title
                    term_value = terms[t_index].value
                    split_term = term_title.split("/")
                    split_term.remove('')
                    for t_split_index in range(len(split_term)):
                        if split_term[t_split_index]:
                            new_term = "<a href='/%s/@@search?taxonomy_adlibtaxonomy=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), term_value, split_term[t_split_index])
                            split_term[t_split_index] = new_term
                    fixed_split_term = " > ".join(split_term)
                    terms[t_index] = fixed_split_term
                    
                if terms:
                    #print terms
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Scientific name')), "value": '<p> '.join(terms)})

                """
                taxonomy = self.get_field_from_object(field, object)
                if len(taxonomy) > 0:
                    common_names = []
                    scientific_names = []

                    for tax in taxonomy:
                        taxonomy_elem = tax

                        scientific_name = taxonomy_elem['scientific_name']
                        common_name = taxonomy_elem['common_name']
                        if scientific_name not in NOT_ALLOWED:
                            scientific_names.append("<a href='/%s/@@search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), scientific_name, scientific_name))

                        if common_name not in NOT_ALLOWED:
                            common_names.append("<a href='/%s/@@search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), common_name, common_name))

                    if scientific_names:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Scientific name')), "value": ', '.join(scientific_names)})
                    if common_names:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Common name')), "value": ', '.join(common_names)})"""


    def create_maker(self, name, url=False):
        maker = []

        if name not in NOT_ALLOWED:
            name_split = name.split(",")

            if len(name_split) > 0:
                if len(name_split) > 1:
                    maker.append(name_split[-1])
                    maker.append(name_split[0])
                else:
                    maker.append(name_split[0])

            new_maker = ' '.join(maker)
            if url:
                #language = self.context.language
                #new_maker = "<a href='%s'>%s</a>" %(url, new_maker)
                new_maker = new_maker
                #new_maker = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(language, new_maker, new_maker)
            else:
                new_maker = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), new_maker, new_maker)

        else:
            return ""

        return new_maker

    def create_production_field(self, field, url=False):
        production = ""

        maker = field['maker']
        qualifier = field['qualifier']
        #role = field['role']
        role = ""
        #place = field['place']
        place = ""

        production = self.create_maker(maker, url)

        if qualifier not in NOT_ALLOWED:
            if production:
                production = "%s, %s" %(qualifier, production)
            else:
                production = "%s" %(qualifier)

        if role not in NOT_ALLOWED:
            if production:
                production = "(%s) %s" %(role, production)
            else:
                production = "(%s)" %(role)

        if place not in NOT_ALLOWED:
            if production:
                production = "%s, %s" %(production, place)
            else:
                production = "%s" %(place)

        return production

    def create_period_field(self, field):
        period = ""
        start_date = field['date_early']
        start_date_precision = field['date_early_precision']
        end_date = field['date_late']
        end_date_precision = field['date_late_precision']

        result = ""

        if period != "" and period != None and period != " ":
            result = "%s" %(period)

        if start_date != "" and start_date != " ":
            if result:
                if start_date_precision != "" and start_date_precision != " ":
                    result = "%s, %s %s" %(result, start_date_precision, start_date)
                else:
                    result = "%s, %s" %(result, start_date)
            else:
                if start_date_precision != "" and start_date_precision != " ":
                    result = "%s %s" %(start_date_precision, start_date)
                else:
                    result = "%s" %(start_date)
    

        if end_date != "" and end_date != " ":
            if result:
                if end_date_precision != "" and end_date_precision != " ":
                    result = "%s - %s %s" %(result, end_date_precision, start_date)
                else:
                    result = "%s - %s" %(result, end_date)
            else:
                if end_date_precision != "" and end_date_precision != " ":
                    result = "%s %s" %(end_date_precision, start_date)
                else:
                    result = "%s" %(end_date)

        return result

    def get_url_by_uid(self, uid):
        brains = uuidToCatalogBrain(uid)
        if brains:
            return brains.getURL()
        return ""

    def generate_production_dating(self, production_dating_tab, object_schema, fields, object, field_schema):
        production_field = self.get_field_from_object('productionDating_productionDating', object)

        production_result = []
        # Generate production
        url = ""
        places = []
        for field in production_field:
            production = {}
            if field['makers']:
                try:
                    production['maker'] = field["makers"][0].title
                    url = self.get_url_by_uid(field["makers"][0].UID())
                except:
                    obj = getattr(field["makers"][0], 'to_object', None)
                    production['maker'] = getattr(obj, 'title', "")
                    url = self.get_url_by_uid(getattr(obj, 'UID', ""))
            else:
                production['maker'] = ""

            production['qualifier'] = field['qualifier']

            if field['role']:
                production['role'] = field['role'][0]
            else:
                production['role'] = ""

            if field['place']:
                production['place'] = field['place'][0]
                if production['place'] not in NOT_ALLOWED:
                    places.append(production['place'])
            else:
                production['place'] = ""

            result = self.create_production_field(production, url)
            if result not in NOT_ALLOWED:
                production_result.append(result)

        if len(production_result) > 0:
            production_value = '<p>'.join(production_result)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Maker')), "value": production_value})
        
        if places:
            place = '<p>'.join(places)
            if place:
                field_label = "Vervaardigingsplaats" if getattr(self.context, 'language', 'nl') == "nl" else "Production place"
                object_schema[field_schema]['fields'].append({"title": self.context.translate(_(field_label)), "value": place})

        ## Generate Period
        period_field = self.get_field_from_object('productionDating_production_periods', object)

        period = []
        for field in period_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                period.append(field_value_searchable)
        
        datering_field = self.get_field_from_object('productionDating_dating_period', object)
        datering = []
        for field in datering_field:
            result = self.create_period_field(field)
            if result not in NOT_ALLOWED:
                datering.append(result)

        school_field = self.get_field_from_object('productionDating_production_schoolStyles', object)

        school = []
        for field in school_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                school.append(field_value_searchable)

        if len(datering) > 0:
            datering_value = ', '.join(datering)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Date')), "value": datering_value})

        if len(period) > 0:
            period_value = ', '.join(period)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Period')), "value": period_value})

        if len(school) > 0:
            school_value = ', '.join(school)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('School / style')), "value": school_value})


    def generate_production_dating_tab(self, production_dating_tab, object_schema, fields, object, field_schema):

        ## Generate Author
        production_field = self.get_field_from_object('productionDating_production', object)
        production = []
        for field in production_field:
            result = self.create_production_field(field)
            if result not in NOT_ALLOWED:
                production.append(result)

        if len(production) > 0:
            production_value = '<p>'.join(production)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Maker')), "value": production_value})

        period_field = self.get_field_from_object('productionDating_production_periods', object)

        period = []
        for field in period_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                period.append(field_value_searchable)

        school_field = self.get_field_from_object('productionDating_production_schoolStyles', object)
        school = []
        for field in school_field:
            if field not in NOT_ALLOWED:
                field_value_searchable = "<a href='/%s/search?SearchableText=%s'>%s</a>" %(getattr(self.context, 'language', 'nl'), field, field)
                school.append(field_value_searchable)

        datering_field = self.get_field_from_object('productionDating_dating_period', object)
        datering = []
        for field in datering_field:
            result = self.create_period_field(field)
            if result not in NOT_ALLOWED:
                datering.append(result)

        if len(datering) > 0:
            datering_value = ', '.join(datering)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Date')), "value": datering_value})

        if len(period) > 0:
            period_value = ', '.join(period)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Period')), "value": period_value})

        if len(school) > 0:
            school_value = ', '.join(school)
            object_schema[field_schema]['fields'].append({"title": self.context.translate(_('School / style')), "value": school_value})

    def create_dimension_field(self, field):
        new_dimension_val = []
        dimension_result = ""

        for val in field:
            dimension = ""
            if val['value'] != "":
                dimension = "%s" %(val['value'])
            if val['units'] != "":
                dimension = "%s %s" %(dimension, val['units'])
            if val['dimension'] != "" and val['dimension'] != []:
                dimension = "%s: %s" %(val['dimension'][0], dimension)
            if val['part'] not in NOT_ALLOWED:
                dimension = "%s (%s)" %(dimension, val['part'])

            new_dimension_val.append(dimension)

        dimension_result = '<p>'.join(new_dimension_val)
        
        return dimension_result

    def generate_physical_characteristics_tab(self, physical_characteristics_tab, object_schema, fields, object, field_schema):
        
        for field, choice, restriction in physical_characteristics_tab:
            if field == 'physicalCharacteristics_dimension':
                dimension_field = getattr(object, 'physicalCharacteristics_dimension', None)
                if dimension_field != None:
                    dimension = self.create_dimension_field(dimension_field)
                    ## add to schema
                    if dimension != "" and dimension != None:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Dimensions')), "value": dimension})
            else:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})


    def generate_associations_tab(self, associations_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in associations_tab:
            if field == "associations_associatedPersonInstitutions":
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue:
                    title = fieldvalue.title
                    associations_field = self.get_field_from_object('associations_associatedPersonInstitutions', object)

                    result = []
                    for line in associations_field:
                        names = line["names"]
                        if names:
                            name = names[0].title
                            url = self.get_url_by_uid(names[0].UID())
                            new_name = self.create_maker(name, url)
                            result.append(new_name)

                    final_result = "<p>".join(result)
                    if final_result != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": final_result})

            else:
                fieldvalue = self.get_field_from_schema(field, fields)
                if fieldvalue != None:
                    title = fieldvalue.title
                    value = self.get_field_from_object(field, object)

                    schema_value = self.transform_schema_field(field, value, choice)

                    if schema_value != "":
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})
    
    def generate_reproductions_tab(self, reproductions_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in reproductions_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    if field == "reproductions_reproduction":
                        title = "Reference"
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})    

    def generate_recommendations_tab(self, recommendations_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in recommendations_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})     

    def generate_location_tab(self, location_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in location_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})


    def generate_fieldcollection_tab(self, fieldcollection_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in fieldcollection_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice)

                if schema_value != "":
                    if field == 'fieldCollection_habitatStratigraphy_stratigraphy':
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_('Geologisch tijdvak')), "value": schema_value})
                    else:
                        object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})


    def generate_exhibitions_tab_temp(self, exhibitions_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction, not_show in exhibitions_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)

                schema_value = self.transform_schema_field(field, value, choice, restriction, not_show)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})

    def generate_exhibition_tab(self, exhibitions_tab, object_schema, fields, object, field_schema):

        relations = []
        related_exhibitions = []

        def get_url_by_uid(context, uid):
            brain = uuidToCatalogBrain(uid)
            if brain:
                return brain.getURL()

            return ""

        for field, choice, restriction, not_show in exhibitions_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)
                if value:
                    for val in value:
                        exhibition = val['exhibitionName']
                        if exhibition:
                            rel = exhibition[0]
                            rel_obj = None
                            if IRelationValue.providedBy(rel):
                                rel_obj = rel.to_object
                            else:
                                rel_obj = rel

                            if rel_obj:
                                rel_url = get_url_by_uid(self.context, rel_obj.UID())
                                rel_title = rel_obj.title
                                related_exhibitions.append("<a href='%s'>%s</a>"%(rel_url, rel_title))

                                rel_date_start = ""
                                rel_date_end = ""
                                if hasattr(rel_obj, 'start_date'):
                                    rel_date_start = rel_obj.start_date

                                if hasattr(rel_obj, 'end_date'):
                                    rel_date_end = rel_obj.end_date

                                if rel_date_start != "":
                                    try:
                                        date_start = rel_date_start.strftime('%Y-%m-%d')
                                    except:
                                        rel_date_start = ""

                                if rel_date_end != "":
                                    try:
                                        date_end = rel_date_end.strftime('%Y-%m-%d')
                                    except:
                                        rel_date_end = ""


                                final_date = ""
                                if rel_date_start != "" and rel_date_end != "":
                                    final_date = "%s t/m %s" %(date_start, date_end)

                                if final_date != "":
                                    related_exhibitions.append(final_date)

                                # organisator
                                orgs = []
                                locations = []
                                places = []
                                """organisators = rel_obj.exhibitionsDetails_organizingInstitutions

                                if organisators:
                                    for organiser in organisators:
                                        try:
                                            name = organiser['name']
                                            if name:
                                                if name != 'Zeeuws Museum':
                                                    orgs.append(name)
                                        except:
                                            pass

                                        try:
                                            l = organiser['address']
                                            if l:
                                                if l != 'Zeeuws Museum':
                                                    locations.append(l)

                                            p = organiser['place']
                                            if p:
                                                if p != 'Zeeuws Museum':
                                                    places.append(p)
                                        except:
                                            pass

                                    final_orgs = ', '.join(orgs)
                                    if final_orgs:
                                        related_exhibitions.append(final_orgs)
                                    
                                    final_locations = ', '.join(locations)
                                    if final_locations:
                                        related_exhibitions.append(final_locations)

                                    final_places = ', '.join(places)
                                    if final_places:
                                        related_exhibitions.append(final_places)"""

        if len(related_exhibitions) > 0:
            related_exhibitions_value = '<p>'.join(related_exhibitions)
            object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Exhibition name')), 'value': related_exhibitions_value})


    def generate_exhibitions_tab(self, exhibitions_tab, object_schema, fields, object, field_schema):
        intids = getUtility(IIntIds)
        catalog = getUtility(ICatalog)

        relations = sorted(catalog.findRelations({'to_id': intids.getId(object), 'from_attribute':'linkedObjects_relatedItems'}))

        related_exhibitions = []
        for rel in relations:
            rel_obj = rel.from_object
            rel_url = rel_obj.absolute_url()
            rel_title = rel_obj.title
            related_exhibitions.append("<a href='%s'>%s</a>"%(rel_url, rel_title))

            rel_date_start = ""
            rel_date_end = ""
            if hasattr(rel_obj, 'start_date'):
                rel_date_start = rel_obj.start_date

            if hasattr(rel_obj, 'end_date'):
                rel_date_end = rel_obj.end_date

            if rel_date_start != "":
                date_start = rel_date_start.strftime('%Y-%m-%d')

            if rel_date_end != "":
                date_end = rel_date_start.strftime('%Y-%m-%d')

            final_date = ""
            if rel_date_start != "" and rel_date_end != "":
                final_date = "%s t/m %s" %(date_start, date_end)

            if final_date != "":
                related_exhibitions.append(final_date)

        if len(related_exhibitions) > 0:
            related_exhibitions_value = '<p>'.join(related_exhibitions)
            object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Exhibitions')), 'value': related_exhibitions_value})

    def generate_labels_tab(self, labels_tab, object_schema, fields, object, field_schema):
        for field, choice, restriction in labels_tab:
            fieldvalue = self.get_field_from_schema(field, fields)
            if fieldvalue != None:
                title = fieldvalue.title
                value = self.get_field_from_object(field, object)
                if len(value) > 1:
                    value = [value[0]]
                schema_value = self.transform_schema_field(field, value, choice, restriction)

                if schema_value != "":
                    object_schema[field_schema]['fields'].append({"title": self.context.translate(_(title)), "value": schema_value})

    def generate_related_books_tab(self, object_schema, fields, object, field_schema):
        if checkPermission('cmf.ManagePortal', self.context):
            intids = getUtility(IIntIds)
            catalog = getUtility(ICatalog)

            relations = sorted(catalog.findRelations({'to_id': intids.getId(object), 'from_attribute':'relations_relatedMuseumObjects'}))
            related_exhibitions = []
            for rel in relations:
                rel_obj = rel.from_object
                rel_url = rel_obj.absolute_url()
                rel_title = rel_obj.title
                related_exhibitions.append("<a href='%s'>%s</a>"%(rel_url, rel_title))
            
            if len(related_exhibitions) > 0:
                related_exhibitions_value = '<p>'.join(related_exhibitions)
                object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Books')), 'value': related_exhibitions_value})


    def generate_documentation_tab(self, object_schema, fields, object, field_schema):
        if hasattr(object, 'documentation_documentation'):
            documentation = object.documentation_documentation
            docs = []

            if documentation:
                for doc in documentation:
                    try:
                        if doc['title'] != "":
                            new_doc = "%s" %(doc['title'])

                            if doc['pageMark'] != "":
                                new_doc = "%s, %s" %(new_doc, doc['pageMark'])

                            if doc['notes'] != "":
                                new_doc = "%s, %s" %(new_doc, doc['notes'])

                            docs.append(new_doc)
                    except:
                        pass

            if len(docs) > 0:
                schema_value = '<p>'.join(docs)
                object_schema[field_schema]['fields'].append({'title': self.context.translate(_('Documentation')), 'value': schema_value})


    def get_all_fields_object(self, object):

        object_schema = {}

        object_schema["identification"] = {
            "fields": [],
            "name": self.context.translate(_("Identification"))
        }

        object_schema["production_dating"] = {
            "fields": [],
            "name": self.context.translate(_("Production & Dating"))
        }

        object_schema["physical_characteristics"] = {
            "fields": [],
            "name": self.context.translate(_("Physical Characteristics"))
        }

        object_schema["associations"] = {
            "fields": [],
            "name": self.context.translate(_("Associations"))
        }

        object_schema["reproductions"] = {
            "fields": [],
            "name": self.context.translate(_("Reproductions"))
        }

        object_schema["recommendations_requirements"] = {
            "fields": [],
            "name": self.context.translate(_("Credits"))
        }

        object_schema["location"] = {
            "fields": [],
            "name": self.context.translate(_("Location"))
        }

        object_schema["field_collection"] = {
            "fields": [],
            "name": self.context.translate(_("Field Collection"))
        }

        object_schema["exhibitions"] = {
            "fields": [],
            "name": self.context.translate(_("Exhibitions"))
        }

        object_schema["labels"] = {
            "fields": [],
            "name": self.context.translate(_("Labels"))
        }

        object_schema["books"] = {
            "fields": [],
            "name": self.context.translate(_("Books"))
        }

        object_schema["documentation"] = {
            "fields": [],
            "name": self.context.translate(_("Documentation"))
        }


        schema = getUtility(IDexterityFTI, name='Object').lookupSchema()
        fields = getFieldsInOrder(schema)

        identification_tab = [('identification_identification_collections', None), ('identification_identification_objectNumber', None),
                                ('identification_objectName_category', None), ('identification_objectName_objectname', 'name'),
                                ('title', None), ('identification_taxonomy_temp', None), ('text', None)]

        production_dating_tab = ['productionDating_production', 'productionDating_production_periods', 'productionDating_production_schoolStyles']

        physical_characteristics_tab = [('physicalCharacteristics_technique', 'technique', None), ('physicalCharacteristics_material', 'material', None),
                                        ('physicalCharacteristics_dimension', None, None)]

        associations_tab = [('associations_associatedSubjects', 'subject', None)]

        reproductions_tab = [('reproductions_reproduction', 'reference', None)]

        recommendations_tab = [('recommendationsRequirements_creditLine_creditLine', None, None)]

        location_tab = [('location_current_location', 'location_type', None)]

        fieldcollection_tab = [('fieldCollection_fieldCollection_places', None, None)]

        exhibitions_tab = [('exhibitions_exhibition', None, 'Zeeuws Museum', ['catObject'])]

        labels_tab = [('labels', 'text', None)]


        ## Identification tab
        try:
            self.generate_identification_tab(identification_tab, object_schema, fields, object, "identification")
        except:
            pass
            
        ## Vervaardiging & Datering tab
        #self.generate_production_dating_tab(production_dating_tab, object_schema, fields, object, "production_dating")
        try:
            #self.generate_production_dating_tab(production_dating_tab, object_schema, fields, object, "production_dating")
            self.generate_production_dating(production_dating_tab, object_schema, fields, object, "production_dating")
        except:
            raise
            
        ## Physical Characteristics
        try:
            self.generate_physical_characteristics_tab(physical_characteristics_tab, object_schema, fields, object, "physical_characteristics")
        except:
            pass

        ## Associations
        try:
            self.generate_associations_tab(associations_tab, object_schema, fields, object, "associations")
        except:
            raise
        ## Reproductions
        try:
            self.generate_reproductions_tab(reproductions_tab, object_schema, fields, object, "reproductions")
        except:
            pass
        ## Recommendations
        try:
            self.generate_recommendations_tab(recommendations_tab, object_schema, fields, object, "recommendations_requirements")
        except:
            pass
        ## Location
        try:
            self.generate_location_tab(location_tab, object_schema, fields, object, "location")
        except:
            pass
        ## Field collection
        try:
            self.generate_fieldcollection_tab(fieldcollection_tab, object_schema, fields, object, "field_collection")
        except:
            pass
        ## Exhibtions
        #self.generate_exhibitions_tab(exhibitions_tab, object_schema, fields, object, "exhibitions")
        try:
            self.generate_exhibition_tab(exhibitions_tab, object_schema, fields, object, "exhibitions")
        except:
            pass

        ## Labels
        try:
            self.generate_labels_tab(labels_tab, object_schema, fields, object, "labels")
        except:
            pass

        ## Books
        try:
            self.generate_related_books_tab(object_schema, fields, object, "books")
        except:
            pass

        ## Documentation
        try:
            self.generate_documentation_tab(object_schema, fields, object, "documentation")
        except:
            pass

        new_object_schema = []
        new_object_schema.append(object_schema['identification'])
        new_object_schema.append(object_schema['production_dating'])
        new_object_schema.append(object_schema['physical_characteristics'])
        new_object_schema.append(object_schema['associations'])
        #new_object_schema.append(object_schema['reproductions'])
        new_object_schema.append(object_schema['recommendations_requirements'])
        #new_object_schema.append(object_schema['location'])
        new_object_schema.append(object_schema['field_collection'])
        #new_object_schema.append(object_schema['exhibitions'])
        #new_object_schema.append(object_schema['labels'])
        new_object_schema.append(object_schema['books'])
        new_object_schema.append(object_schema['documentation'])
        return new_object_schema



    def build_json_with_list(self, list_items, object_idx, total, is_folder, total_items):
        items = {
            'list':[],
            'object_idx':object_idx,
            'total': total,
            'has_list_images':False,
            'view_type': 'regular',
            'total_items': 0
        }

        state = getMultiAdapter(
                (self.context, self.request),
                name=u'plone_context_state')

        # Check view type
        view_type = state.view_template_id()

        if view_type == "double_view" or view_type == "multiple_view":
            items["has_list_images"] = True
            items["view_type"] = view_type

        items['total_items'] = total_items

        if is_folder:
            for obj in list_items:
                p_obj = obj.getObject()
                obj_media = ICanContainMedia(p_obj).getLeadMedia()
                if obj_media != None:
                    if obj.portal_type == "Book":
                        schema = self.get_all_fields_book(p_obj)
                    else:
                        schema = self.get_all_fields_object(p_obj)
                        
                    if not items['has_list_images']:
                        items['list'].append({'schema':schema, 'url':obj.getURL(),'image_url': obj_media.absolute_url()+'/@@images/image/large', 'object_id': obj.getId, 'title':obj.Title, 'description': obj.Description, 'body': self.get_object_body(p_obj)})
                    else:
                        items['list'].append({'schema':schema, 'images':self.get_multiple_images(p_obj, view_type), 'url':obj.getURL(),'image_url': obj_media.absolute_url()+'/@@images/image/large', 'object_id': obj.getId, 'title':obj.Title, 'description': obj.Description, 'body': self.get_object_body(p_obj)})    
                else:
                    if obj.portal_type == "Book":
                        schema = self.get_all_fields_book(p_obj)
                    else:
                        schema = self.get_all_fields_object(p_obj)
                    items['list'].append({'schema':schema, 'url':obj.getURL(),'image_url': '', 'object_id': obj.getId, 'title':obj.Title, 'description': obj.Description, 'body': self.get_object_body(p_obj)})

        else:
            for obj in list_items:
                p_obj = obj.getObject()
                obj_media = ICanContainMedia(p_obj).getLeadMedia()
                
                if obj_media != None:
                    if obj.portal_type == "Book":
                        schema = self.get_all_fields_book(p_obj)
                    else:
                        schema = self.get_all_fields_object(p_obj)
                    if not items['has_list_images']:
                        items['list'].append({'schema':schema, 'url':obj.getURL(),'image_url': obj_media.absolute_url()+'/@@images/image/large', 'object_id': obj.getId(), 'title':obj.Title(), 'description': obj.Description(), 'body': self.get_object_body(p_obj)})
                    else:
                        items['list'].append({'schema':schema, 'images':self.get_multiple_images(p_obj, view_type), 'url':obj.getURL(),'image_url': obj_media.absolute_url()+'/@@images/image/large', 'object_id': obj.getId(), 'title':obj.Title(), 'description': obj.Description(), 'body': self.get_object_body(p_obj)})        

                else:
                    if obj.portal_type == "Book":
                        schema = self.get_all_fields_book(p_obj)
                    else:
                        schema = self.get_all_fields_object(p_obj)
                    items['list'].append({'schema':schema, 'url':obj.getURL(),'image_url': '', 'object_id': obj.getId(), 'title':obj.Title(), 'description': obj.Description(), 'body': self.get_object_body(p_obj)})
                         
        return items

    """
    Get bulk of prev items
    """
    def get_prev_objects(self):
        bulk = 10
        b_start = self.request.get('b_start')
        collection_id = self.request.get('collection_id')
        object_id = self.request.get('object_id')

        if b_start != None and collection_id != None and object_id != None:
            collection_object = self.get_collection_from_catalog(collection_id)
            results = self.get_all_batch(collection_object, False)
            object_idx = self.get_object_idx(results, object_id)

            if object_idx-bulk >= 0:
                list_of_items = list(results)
                bulk_of_items = list_of_items[(object_idx-bulk):object_idx]
                items = self.build_json_with_list(bulk_of_items, 0, False, False, len(list_of_items))
                items['list'] = list(reversed(items['list']))
                return json.dumps(items)

        return json.dumps({'list':[], 'object_idx':0})

    def get_next_objects(self):
        bulk = 10
        b_start = self.request.get('b_start')
        collection_id = self.request.get('collection_id')
        object_id = self.request.get('object_id')
        req_bulk = self.request.get('bulk')

        if req_bulk != None:
            buffer_size = int(req_bulk)

        is_collection = False
        is_folder = False
        if b_start != None and collection_id != None:
            is_collection = True
        else:
            if self.context.getParentNode() != None:
                parent = self.context.getParentNode();
                if parent.portal_type == 'Folder':
                    is_folder = True

        if not (is_folder == False and is_collection == False) and object_id != None:
            if is_collection:
                collection_object = self.get_collection_from_catalog(collection_id)
            else:
                collection_object = parent

            results = self.get_all_batch(collection_object, is_folder)
            object_idx = self.get_object_idx(results, object_id, is_folder)

            if object_idx+bulk < len(results):
                list_of_items = list(results)
                bulk_of_items = list_of_items[(object_idx+1):(object_idx+bulk+1)]
                items = self.build_json_with_list(bulk_of_items, 0, False, is_folder, len(list_of_items))
                return json.dumps(items)
            
            elif object_idx+bulk >= len(results):
                list_of_items = list(results)
                offset = (object_idx+bulk) - len(results)
                bulk_of_items = list_of_items[(object_idx+1):] + list_of_items[0:(offset+1)]
                items = self.build_json_with_list(bulk_of_items, 0, True, is_folder, len(list_of_items))
                return json.dumps(items)

        return json.dumps({'list':[], 'object_idx':0, 'total':False})

    def get_object_body(self, object):
        if hasattr(object, 'text') and object.text != None:
            return object.text.output
        else:
            return ""

    """
    Get bulk of next items
    """

    def _get_next_objects(self):
        buffer_size = 10
        b_start = self.request.get('b_start')
        if not b_start:
            b_start = 1
            
        collection_id = self.request.get('collection_id')
        object_id = self.request.get('object_id')
        req_bulk = self.request.get('bulk')

        if object_id:
            dangerous_entries = int(object_id)
        else:
            dangerous_entries = 1

        if collection_id:
            collection_object = uuidToObject(collection_id)

            if collection_object.portal_type == "Collection":
                new_start = dangerous_entries

                if int(b_start) > buffer_size:
                    new_start = int(b_start) + 5
                
                sort_on = ICollection(collection_object).sort_on
                next_batch = collection_object.queryCatalog(batch=True, b_size=buffer_size, b_start=new_start, sort_on=sort_on)
                next_items = next_batch._sequence

                collection_total_size = next_items.actual_result_count
                items = self.build_json_with_list(next_items, 0, False, False, collection_total_size)
                return json.dumps(items)

            return json.dumps({'list':[], 'object_idx':0, 'total':False})
        else:
            return json.dumps({'list':[], 'object_idx':0, 'total':False})

    def _getJSON(self):
        
        buffer_size = 10

        object_id = self.context.getId()

        b_start = self.request.get('b_start')
        if b_start:
            b_start = int(b_start)
        else:
            b_start = 1
        collection_id = self.request.get('collection_id')
        req_buffer = self.request.get('bulk')
        #if req_buffer:
        #    buffer_size = int(req_buffer)

        if collection_id:
            collection_object = uuidToObject(collection_id)

            if collection_object.portal_type == "Collection":
                b_size = ICollection(collection_object).item_count
                sort_on = ICollection(collection_object).sort_on
                real_object_index = b_start

                if real_object_index - buffer_size < 0:
                    new_size = buffer_size - abs(real_object_index-buffer_size)
                    if new_size:
                        prev_batch = collection_object.queryCatalog(batch=True, b_size=new_size, b_start=0, sort_on=sort_on)
                        prev_items = prev_batch._sequence
                    else:
                        prev_items = []

                elif real_object_index - buffer_size >= 0:
                    new_start = real_object_index - buffer_size
                    if buffer_size:
                        prev_batch = collection_object.queryCatalog(batch=True, b_size=buffer_size, b_start=new_start, sort_on=sort_on)
                        prev_items = prev_batch._sequence
                    else:
                        prev_items = []

                next_batch = collection_object.queryCatalog(batch=True, b_size=buffer_size, b_start=real_object_index, sort_on=sort_on)
                next_items = next_batch._sequence

                collection_total_size = next_items.actual_result_count
                final_items = list(next_items) + list(prev_items)
                items = self.build_json_with_list(final_items, 0, False, False, collection_total_size)
                items['index_obj'] = real_object_index+1

                return json.dumps(items)

            return json.dumps({'list':[], 'object_idx':0, 'total':False})
        else:
            return json.dumps({'list':[], 'object_idx':0, 'total':False})
        

    def getJSON(self):
        pagesize = 33
        
        buffer_size = 10
        b_start = self.request.get('b_start')
        collection_id = self.request.get('collection_id')
        req_bulk = self.request.get('bulk')

        if req_bulk != None:
            buffer_size = int(req_bulk)

        items = {}

        is_folder = False
        is_collection = False

        if b_start != None and collection_id != None:
            is_collection = True
        else:
            if self.context.getParentNode() != None:
                parent = self.context.getParentNode();
                if parent.portal_type == 'Folder':
                    is_folder = True

        if not (is_folder == False and is_collection == False): 
            if is_collection:
                collection_object = self.get_collection_from_catalog(collection_id)
            else:
                collection_object = parent

            current_id = self.context.getId()

            results = self.get_all_batch(collection_object, is_folder)
            object_idx = self.get_object_idx(results, current_id, is_folder)

            if object_idx-buffer_size >= 0 and object_idx+buffer_size < len(results):
                list_of_items = list(results)
                
                prev_items = list_of_items[(object_idx-buffer_size):object_idx]
                next_items = list_of_items[object_idx:(object_idx+buffer_size+1)]

                bulk_of_items = next_items + prev_items
                
                items = self.build_json_with_list(bulk_of_items, 0, False, is_folder, len(list_of_items))
                items['index_obj'] = object_idx+1
                return json.dumps(items)
            
            elif object_idx-buffer_size < 0 and object_idx+buffer_size < len(results):
                #fetch from last page
                offset = object_idx-buffer_size
                
                list_of_items = list(results)
                prev_items = list_of_items[offset:] + list_of_items[0:object_idx]
                next_items = list_of_items[object_idx:(object_idx+buffer_size+1)]

                bulk_of_items = next_items + prev_items
                
                items = self.build_json_with_list(bulk_of_items, 0, False, is_folder, len(list_of_items))
                items['index_obj'] = object_idx+1
                return json.dumps(items)

            elif object_idx+buffer_size >= len(results) and object_idx-buffer_size > 0:
                list_of_items = list(results)

                offset = (object_idx+buffer_size) - len(results)

                prev_items = list_of_items[(object_idx-buffer_size):object_idx]
                next_items = list_of_items[object_idx:] + list_of_items[0:(offset+1)]

                bulk_of_items = next_items + prev_items
                items = self.build_json_with_list(bulk_of_items, 0, False, is_folder, len(list_of_items))
                items['index_obj'] = object_idx+1
                return json.dumps(items)

            elif object_idx+buffer_size >= len(results) and object_idx-buffer_size < 0:
                list_of_items = list(results)

                prev_items = list_of_items[0:object_idx]
                next_items = list_of_items[object_idx:]

                bulk_of_items = next_items + prev_items
                items = self.build_json_with_list(bulk_of_items, 0, True, is_folder, len(list_of_items))
                items['index_obj'] = object_idx+1
                return json.dumps(items)
        else:
            return json.dumps(items);


class object_utils(BrowserView):

    def util(self):
        return



